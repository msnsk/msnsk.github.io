<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GodotEngine on Peanuts Code</title>
    <link>https://www.peanuts-code.com/ja/tags/godotengine/</link>
    <description>Recent content in GodotEngine on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.139.3</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/ja/tags/godotengine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🕹️ モバイルゲーム - もの切り侍</title>
      <link>https://www.peanuts-code.com/ja/portfolio/work0001_slashing_samurai/</link>
      <pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://www.peanuts-code.com/ja/portfolio/work0001_slashing_samurai/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/wHKKKYeLvJk?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h2 id=&#34;カジュアルタイミングゲームもの切り侍が登場&#34;&gt;カジュアル・タイミングゲーム「もの切り侍」が登場！&lt;/h2&gt;
&lt;p&gt;今あなたの動体視力と反射神経が試される！侍を操作して、空から降ってくるあんな物やこんな物を見事空中で切ることができるか？！簡単片手操作でプレイできる、激ハマり必至の爽快カジュアル・タイミングゲーム！&lt;/p&gt;

&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;

    
    &lt;video controls autoplay loop muted playsinline aria-label=&#39;Slashing Samurai Preview&#39; style=&#39;width: 40%&#39;&gt;
    
        &lt;source src=&#34;https://www.peanuts-code.com/images/portfolio/slashing_samurai/ja/pv/pv_ja_1.mp4&#34; type=&#34;video/mp4&#34;&gt;
        
        Your browser does not support the video tag.
    &lt;/video&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;h2 id=&#34;どんなゲーム&#34;&gt;どんなゲーム？&lt;/h2&gt;
&lt;p&gt;ゲームのジャンルはいわゆるタイミングゲームになります。ゲームの各ステージでは、なんらかの落ち物（ドーナッツ、ぬいぐるみ、トマト、自転車、石像、などなど、古今東西さまざま！）が、空から降ってきます。プレイヤーのタッチ＆リリース操作で、ドット絵の侍をジャンプさせ、空中でうまく落ち物を切ることができればステージクリアとなります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🕹️ モバイルゲーム - ステキなソリティア</title>
      <link>https://www.peanuts-code.com/ja/portfolio/work0002_lovely_solitaire/</link>
      <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://www.peanuts-code.com/ja/portfolio/work0002_lovely_solitaire/</guid>
      <description>&lt;h2 id=&#34;カードゲームステキなソリティアが登場&#34;&gt;カードゲーム「ステキなソリティア」が登場！&lt;/h2&gt;
&lt;p&gt;「ソリティア（クロンダイク）」と言えば、言わずと知れた定番中の定番、一人遊びカードゲームの王様なわけですが、このたび、モバイルゲーム「ステキなソリティア」が App Store で配信！オシャレなユーザーインターフェースなので、電車の中でプレイしていても、なんかイケてる感じを醸し出すことができます！（本当かな？）初めてプレイする人もご安心を。ゲームのルールやコツはゲーム内の「遊び方」から確認できます！&lt;/p&gt;</description>
    </item>
    <item>
      <title>🕹️ モバイルゲーム - クイックハンドポーカー</title>
      <link>https://www.peanuts-code.com/ja/portfolio/work0003_quick_hand_poker/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://www.peanuts-code.com/ja/portfolio/work0003_quick_hand_poker/</guid>
      <description>&lt;h2 id=&#34;落ち物ゲームになったポーカーというのがコレです&#34;&gt;落ち物ゲームになったポーカーというのがコレです！&lt;/h2&gt;
&lt;p&gt;カジノのテーブルゲームとして多くの人に親しまれているポーカーですが、なんと、落ち物ゲームとして生まれ変わりました！その名も「クイックハンドポーカー」です！画面上に落とされたトランプのスート（マーク）とランク（数字）を組み合わせたオブジェクトを素早く5つタッチしてポーカーの役を揃えましょう！制限時間内に高得点を目指しましょう！初めてプレイする人もご安心を。ゲームのルールや役はゲーム内で簡単に確認できます！&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 2Dグリッドベース移動</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0010_2d_grid_based_movement/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0010_2d_grid_based_movement/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;このチュートリアルでは Godot で 2D ゲームにおける「グリッドベース移動」を実装してみます。できるだけシンプルに。&lt;/p&gt;
&lt;p&gt;そもそもグリッドベース移動って何なん？という方もいらっしゃるかと。グリッドベース移動とは、グリッド（格子状の線）で等間隔に区分されたゲームの画面上をキャラクターなどのオブジェクトが 1 グリッド（1 マス）ずつ移動する動きのことです。&lt;/p&gt;
&lt;p&gt;少し昔のゲームを例にあげて恐縮ですが、「ファイヤーエムブレムシリーズ」「タクティクスオウガ」など、シミュレーションゲームでよく見かけます。あとは「ファイナルファンタジー」や「ドラゴンクエスト」シリーズなどの RPG も 2D グラフィック時代は、マップ上のキャラクター移動を観察すると、グリッドベース移動を行っています。テトリスなんかのパズルゲームでもピースやブロックの移動がグリッドベースになっていることが結構あります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 TileMapLayerでタイルマップを作る</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0024_tilemaplayer/</link>
      <pubDate>Fri, 23 Aug 2024 13:55:22 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0024_tilemaplayer/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Godot 4.3 から、従来使われてきた TileMap クラスが Deprecated（今後もうアップデートされないってこと）になって、その代わりに TileMapLayer クラスが新たに追加されました。ということで、TileMapLayer で実際にタイルマップを作ってみたいと思います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;記事作成当時の筆者の環境&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot のバージョン: &lt;strong&gt;4.3&lt;/strong&gt;&lt;br&gt;
コンピュータのモデル: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;h2 id=&#34;画面の大きさを設定する&#34;&gt;画面の大きさを設定する&lt;/h2&gt;
&lt;p&gt;今回は 16 x 16 px のタイル画像を使うので、Viewport は小さめにしてタイルがちょうど収まるサイズにしますね。プロジェクトを新規作成したら、プロジェクト設定 &amp;gt; 一般タブ &amp;gt; Window で以下のように設定しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Game Center プラグインを追加したあとの実装</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0022_implement_game_center/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0022_implement_game_center/</guid>
      <description>&lt;p&gt;前回の &lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0021_game_center_plugin/&#34; title=&#34;プロジェクトに Game Center プラグインを追加する&#34;&gt;🤖 プロジェクトに Game Center プラグインを追加する&lt;/a&gt;
 の記事では Godot 公式の iOS プラグインのうち Game Center のプラグインをプロジェクトに追加する手順について説明したんやけど、今回の記事では、その追加したプラグインを使って、実際に Apple の Game Center の機能を実装する方法について書いてるで。&lt;/p&gt;
&lt;p&gt;そもそも Game Center って何？って人がいるかもしれんけど、前回の記事の冒頭で軽く説明してるから、よかったら先にそっち見てみてな。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 プロジェクトに Game Center プラグインを追加する</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0021_game_center_plugin/</link>
      <pubDate>Wed, 01 May 2024 20:17:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0021_game_center_plugin/</guid>
      <description>&lt;p&gt;この記事では、Apple の Game Center と連携させるための Godot 公式プラグインをプロジェクトに追加する方法について説明していくで。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ちなみに、今までの記事は「である」調で書いてたんやけど、ちょっと堅苦しくて偉そうやったから、今回から、口語調というか、おもいっきり普段のタメ語の関西弁で書いていくことにしたんやわ。今までの記事を読んでくれてたみんなにはビビらせてしまうかもしれんけど、まあ、普通の文章書くんなら ChatGPT のほうが上手に書きよるから、ちょっと人間らしさ出してこや、って感じやねん。関西弁アレルギーの人はほんまゴメンやで。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 のサウンドリソースをプログラムで切り替える方法</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0020_switching_sound_resources/</link>
      <pubDate>Tue, 18 Oct 2022 20:17:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0020_switching_sound_resources/</guid>
      <description>&lt;p&gt;この記事では、「AudioStreamPlayer」ノード 1 つで複数のサウンドリソース（音楽や効果音のファイル）を切り替えて再生する方法を説明する。&lt;/p&gt;
&lt;p&gt;基本的に、「AudioStreamPlayer」系のクラスは、ノード１つに対して、設定できるサウンドリソースは１つだけだ。つまり、サウンドリソースの数だけシーンツリー内に「AudioStreamPlayer」ノードを追加しなければならない。サウンドリソース以外全て同じ設定のノードがシーンツリー内に複数存在する（以下のスクリーンショットのような）状況には無駄を感じるだろうし、またシーンドックの視認性が悪くて少し嫌になるかもしれない。&lt;br&gt;
&lt;img alt=&#34;project settings - window size&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0020_switching_sound_resources/img0.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るアニメーションステートマシン</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0019_2d_animation_state_machine/</link>
      <pubDate>Thu, 13 Oct 2022 16:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0019_2d_animation_state_machine/</guid>
      <description>&lt;p&gt;今回のテーマは 2D ゲームのアニメーションステートマシンの実装だ。ステートとは「状態」のことで、ステートマシンというのは、キャラクターのある状態からある状態への遷移を制御する仕組みのことだ。&lt;/p&gt;
&lt;p&gt;ある状態からは限られた状態にしか遷移できなかったり、状態によって今のアニメーションが終了してから次の状態に遷移させるのか、ただちに遷移させるのかの違いがある。例えば、「idle（待機）」と「run（移動）」はただちに双方向に遷移するが、「idle」から「attack（攻撃）」へはただちに遷移しても「attack」から「run」へは遷移せず、また「attack」から「idle」へは「attack」のアニメーションが終わってから遷移する、といった具合だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る 2D ゲームの近接攻撃の当たり判定</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0018_melee_attacks/</link>
      <pubDate>Mon, 03 Oct 2022 22:55:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0018_melee_attacks/</guid>
      <description>&lt;p&gt;この記事では、2Dゲームにおけるシンプルな近接攻撃の当たり判定を実装する方法を紹介する。&lt;/p&gt;
&lt;p&gt;一般的によく使われる手法で、攻撃するオブジェクト（プレイヤーキャラクターなど）に攻撃時のみ有効になる衝突形状（Hit Box という）を用意し、攻撃を受けるオブジェクト（敵キャラクターや破壊できる樽や木箱、草など）には攻撃を受ける範囲となる衝突形状（Hurt Box という）を用意し、攻撃時のアニメーションに合わせて、Hit Box と Hurt Box の有効/無効の切り替えやサイズ、位置の変更をすることで攻撃の当たり判定を実装することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る 2D グリッドベース経路探索</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0017_2d_grid_based_path_finding/</link>
      <pubDate>Mon, 19 Sep 2022 02:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0017_2d_grid_based_path_finding/</guid>
      <description>&lt;p&gt;この記事では、AStar というアルゴリズムを利用して、2D ゲームにおけるグリッドベースの経路探索の実装方法について紹介する。なお、グリッドベースではない 2D 経路探索については、「&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0016_2d_path_finding/&#34; title=&#34;Godot で作る 2D 経路探索&#34;&gt;Godot で作る 2D 経路探索&lt;/a&gt;
」の記事で紹介しているので、作りたいゲームに併せて記事を選んでいただければ幸いだ。&lt;/p&gt;
&lt;p&gt;このチュートリアルで最後にできあがるプロジェクトのファイルは &lt;a href=&#34;https://github.com/msnsk/2DGridBasedPathFInding.git&#34; target=&#34;_blank&#34;&gt;GitHubリポジトリ&lt;/a&gt;
 に置いている。.zipファイルをダウンロードして展開したあと、「project.godot」ファイルを Godot Engine でインポートしていただければ、直接プロジェクトを確認していただくことも可能だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る 2D 経路探索</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0016_2d_path_finding/</link>
      <pubDate>Mon, 15 Aug 2022 02:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0016_2d_path_finding/</guid>
      <description>&lt;p&gt;このチュートリアルでは 2D ゲームにおける経路探索 (Path Finding) について紹介する。経路探索というのは、例えばあるオブジェクトをある目的地へ移動させる際に、オブジェクトから目的地までの移動可能な最短経路を割り出す機能だ。なお、AStar というアルゴリズムを利用したグリッドベースの経路探索については「&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0017_2d_grid_based_path_finding/&#34; title=&#34;Godot で作る 2D グリッドベース経路探索&#34;&gt;Godot で作る 2D グリッドベース経路探索&lt;/a&gt;
」の記事で紹介している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る円形プログレスバー</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0015_circular_progress_bar/</link>
      <pubDate>Fri, 05 Aug 2022 11:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0015_circular_progress_bar/</guid>
      <description>&lt;p&gt;今回は、円形のプログレスバーの作り方を紹介する。プログレスバーを、一般的な縦向きや横向きではなく、円形にすることによって、画面上のちょっとしたアクセントにもなるので使い所があれば是非参考にしていただきたい。また、チュートリアルの最後のほうで、円形以外の形状（例えばハート型）のプログレスバーもサンプルとしていくつか紹介するのでそちらも興味があればぜひご覧いただきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る画面揺れ</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0014_screen_shake/</link>
      <pubDate>Thu, 28 Jul 2022 14:10:56 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0014_screen_shake/</guid>
      <description>&lt;p&gt;今回の記事では、2Dゲームでの画面揺れの実装方法を紹介する。ゲームに絶対に必要な要素ではないが、うまく使えばプレイヤーのゲーム体験をよりインタラクティブにでき、ユーザエクスペリエンスに直接影響を与えることができる。例えば、銃を撃った時や敵からダメージを受けた時、高いところから落ちた時など、使えそうな場面は山ほどある。ちなみに、このような必要ではないものの追加することでゲームをより面白くする要素を、英語圏ではゲーム・ジュース[Game Juice]といい、またそうすることをジューシング[Juicing]というようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る進化形マッチ 3 パズルゲーム</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0013_advanced_match3/</link>
      <pubDate>Sun, 10 Jul 2022 00:51:37 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0013_advanced_match3/</guid>
      <description>&lt;p&gt;今回のチュートリアルでは、進化形マッチ3パズルゲームと銘打って、盤面上で１つのピースを一定時間（数秒間）自由に動かして同じ色のピースを３つ以上並べて消すタイプのパズルゲームをを作っていく。&lt;/p&gt;
&lt;p&gt;これはモバイルゲームで人気を博した「パズル&amp;amp;ドラゴンズ（Puzzle &amp;amp; Dragons）/ 通称パズドラ」のようなパズルをイメージしていただくとわかりやすいだろう。&lt;/p&gt;
&lt;p&gt;ただし、チュートリアルに味方のデッキやガチャ、敵キャラクターとのバトルなど全てのゲーム要素を盛り込むとボリュームが大きすぎるので、今回はパズル部分にフォーカスして手順を説明させていただく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>📔 ゲームの個人開発で挫折しないための方法</title>
      <link>https://www.peanuts-code.com/ja/posts/post0003_how_to_avoid_frustration/</link>
      <pubDate>Sun, 03 Jul 2022 02:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/posts/post0003_how_to_avoid_frustration/</guid>
      <description>&lt;p&gt;せっかく始めたゲームの個人開発、できれば長く楽しく続けたいものだ。しかし、一般的にゲーム開発は挫折しがちである。まずはその理由について考えてみよう。&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;挫折する理由&#34;&gt;挫折する理由&lt;/h2&gt;
&lt;p&gt;まず、ゲーム開発は大変だ。総合芸術などと呼ばれることもある。つまり、ゲームというのは、音楽も映像もキャラクターもシナリオもシステムもレベルデザインも、全部合わせて１つの作品として表現するものなのだ。簡単なわけがない。大変なので、まずそれだけで挫折しがちというわけだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るマッチ 3 パズルゲーム</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0012_match3/</link>
      <pubDate>Sun, 26 Jun 2022 03:18:03 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0012_match3/</guid>
      <description>&lt;p&gt;今回のチュートリアルではマッチ3パズルゲームを作っていく。マッチ3（スリー）パズルゲームとは、盤面のグリッドに沿って均一に並べられた複数のカラフルなピースのうちの１つを、1マス動かして同じ色のピースを３つ以上並べて消すタイプのパズルゲームの総称だ。うまく動かすと、一回の操作で連続的に複数のピースを消すことができ、なんとも気持ちの良いプレイ感覚を味わうことができる。簡単な操作で気軽に楽しめるため、モバイルゲームで特に人気のあるジャンルだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る同じ色をつなげて消すパズルゲーム</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0011_connect_colors/</link>
      <pubDate>Tue, 14 Jun 2022 22:43:45 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0011_connect_colors/</guid>
      <description>&lt;p&gt;このチュートリアルでは、スマホゲームで大人気の ディズニーツムツムのような同じ色のドロップをなぞってつなげて消すタイプのゲームの作り方を説明する。ちなみにディズニーツムツムを知らない方は以下のリンク先を一度ご覧いただきたい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.disney.co.jp/games/dtt.html&#34; target=&#34;_blank&#34;&gt;LINE：ディズニー ツムツム&lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Other Tutorials&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
「パズル＆ドラゴンズ」のようなゲームを作ってみたい場合：&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0013_advanced_match3/&#34; title=&#34;Godot で作る進化形マッチ 3 パズルゲーム&#34;&gt;Godot で作る進化形マッチ 3 パズルゲーム&lt;/a&gt;
&lt;br&gt;
「キャンディークラッシュ」のようなゲームを作ってみたい場合：&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0012_match3/&#34; title=&#34;Godot で作るマッチ 3 パズルゲーム&#34;&gt;Godot で作るマッチ 3 パズルゲーム&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るホーミングミサイル</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0008_homing_missiles/</link>
      <pubDate>Fri, 27 May 2022 17:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0008_homing_missiles/</guid>
      <description>&lt;p&gt;このチュートリアルでは、2Dトップダウンシューティングにおける「ホーミングミサイル」を作っていく。ホーミングミサイルというのは、ターゲットを追跡するミサイルのことだ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
このチュートリアルは以下の環境で作成しました。&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot のバージョン: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;コンピュータのOS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;このチュートリアルでは、ホーミングミサイルの作成にフォーカスするため、それ以外の部分は事前に下準備として作成済みだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る弾幕シューティングの弾幕</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0007_bullethell/</link>
      <pubDate>Sat, 21 May 2022 17:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0007_bullethell/</guid>
      <description>&lt;p&gt;このチュートリアルでは、2Dトップダウンシューティングゲームの「弾幕」を作っていく。弾幕というのは、敵キャラクターから放たれる大量の弾（またはそれに類似する遠距離攻撃）のことで、弾が幕のように隙間なく飛んでくるので「弾幕」という。プレイヤーはその隙間を縫うようにうまくかわしながら、敵キャラクターを射撃して倒していくゲームを弾幕シューティングゲームという。単に弾幕をかわすことに特化したゲームもある。イメージに合う宇宙船や戦闘機をモチーフにしたゲームが多いのも特徴だ（今回は魔法使いとモンスターの地上戦だが）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>📔 ゲーム開発は簡単なものから始めよう</title>
      <link>https://www.peanuts-code.com/ja/posts/post0002_development_starts_small/</link>
      <pubDate>Sun, 08 May 2022 20:56:38 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/posts/post0002_development_starts_small/</guid>
      <description>&lt;p&gt;今回の記事は、もしあなたがゲーム開発を始めたばかりか、これから始めようと思っている初心者の場合は、特にご一読いただきたい内容になっている。最後までご覧いただけると幸いだ。&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;さて、あなたにはどうしても作ってみたい「夢のゲーム」があるだろうか？おそらくゲーム開発を始めた人や始めようと考えている人の多くが、おそらくそういったゲームを夢想しているのではないだろうか。そして、そのゲームには、自分がこれまでの人生でプレイして影響を受けてきたゲームの要素がふんだんに盛り込まれているはずだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るトップダウンシューティングの 4 種類の銃</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0006_guns_of_topdown_shooter/</link>
      <pubDate>Wed, 04 May 2022 01:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0006_guns_of_topdown_shooter/</guid>
      <description>&lt;p&gt;このチュートリアルでは、2Dトップダウンシューティングゲーム（見下ろし型シューティングゲーム）で一般的によく登場する銃を4種類作っていく。具体的には以下の通りだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ハンドガン&lt;/li&gt;
&lt;li&gt;ショットガン&lt;/li&gt;
&lt;li&gt;マシンガン&lt;/li&gt;
&lt;li&gt;レーザーガン&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
このチュートリアルは以下の環境で作成しました。&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot のバージョン: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;コンピュータのOS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;このチュートリアルでは、銃の作成にフォーカスするため、以下は予め用意しておいた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 エディタの便利な検索機能</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0009_various_searches/</link>
      <pubDate>Mon, 25 Apr 2022 17:08:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0009_various_searches/</guid>
      <description>&lt;p&gt;Godot でゲームのプロジェクトを作っていると、そのうちゲームの規模がある程度大きくなった時に、ファイルシステムドックですぐに編集したいシーンが見つからなかったり、さっき修正しようと思っていたスクリプトがどこに行ったかわからなくなったりすることがあるかもしれない。&lt;/p&gt;
&lt;p&gt;今回は Godot エディタに備わっているキーボードショートカットでの便利な検索機能を紹介する。これらを知っているだけで「見つからない何かを探す」という、おそらく最も楽しくない時間を激減させることができるだろう。なんなら、ファイルシステムやスクリプトエディタで直接ファイルにカーソルを合わせてクリックして選択していた手順を、毎回検索する手順に切り替えてしまっても良いだろう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 15：いろいろな仕掛けを追加しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_15/</link>
      <pubDate>Sun, 24 Apr 2022 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_15/</guid>
      <description>&lt;p&gt;第15回目の今回はいよいよこのチュートリアルのシリーズの最終回だ。最終回はプラットフォーマーのレベルデザインに比較的よく使われるいくつかの仕掛けを追加していく。具体的には以下にリストアップしたトラップやギミックの類だ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;動く床&lt;/li&gt;
&lt;li&gt;落ちる床&lt;/li&gt;
&lt;li&gt;高く飛べる床&lt;/li&gt;
&lt;li&gt;火が出る装置&lt;/li&gt;
&lt;li&gt;飛んでくる鉄球&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は Part 1 でインポート済みのアセットからたくさんのスプライトシートを利用する。例によって、見た目にブラーがかかっている（ピクセルアート特有のエッジが効いた画像ではない）場合は、ファイルシステム上で利用するアセットファイルを選択し、インポートドックから「プリセット」＞「2D Pixel」を選択し、「再インポート」をクリックして修正しよう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 14：プレイヤーキャラクターのアクションをアップデートしよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_14/</link>
      <pubDate>Thu, 14 Apr 2022 02:07:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_14/</guid>
      <description>&lt;p&gt;第14回目の今回は、プレイヤーキャラクターのアクションをアップデートしていく。具体的には以下にリストアップしたジャンプとダッシュの動きや演出を追加していく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;落下時のアニメーション&lt;/li&gt;
&lt;li&gt;壁ジャンプ&lt;/li&gt;
&lt;li&gt;ダブルジャンプ（2段ジャンプ）&lt;/li&gt;
&lt;li&gt;走っている時の砂埃&lt;/li&gt;
&lt;li&gt;ダッシュ時のゴーストエフェクト（残像効果）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;おまけのような内容だが、作って実際にプレイすると非常に楽しいところなので、是非やってみてほしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 13：サウンドを追加しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_13/</link>
      <pubDate>Fri, 08 Apr 2022 19:42:19 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_13/</guid>
      <description>&lt;p&gt;第13回目の今回は、ゲームにサウンドを追加する。ゲームに使われるサウンドというのは、大きく分けて2種類ある。バックグラウンドミュージック（BGM）と効果音（サウンドエフェクト：SFX）だ。Godot Engine ではどちらも追加する方法に大きな違いはない。素材さえ用意すれば、追加するのは比較的簡単だ。特定のタイミングでサウンドを鳴らしたい時、例えば、プレイヤーキャラクターがジャンプした時にジャンプの効果音を鳴らしたい場合などには、プログラミングして制御する必要があるが、複雑なコードにはならないので安心してほしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 12：光と影を演出しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_12/</link>
      <pubDate>Sat, 26 Mar 2022 00:25:27 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_12/</guid>
      <description>&lt;p&gt;第12回目の今回は、ゲームプレイ画面に光と影の演出、というテーマでやっていく。前回に引き続き、ビジュアル面でのゲームのアップデートだ。結果が目に見えてわかりやすいのと、今回もスクリプト不要の内容なので、気楽にやっていこう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 11：背景を作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_11/</link>
      <pubDate>Fri, 25 Mar 2022 22:31:30 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_11/</guid>
      <description>&lt;p&gt;第11回目の今回は、ゲームプレイ画面の背景を作る。&lt;/p&gt;
&lt;p&gt;背景と言っても、ただテクスチャ画像を一枚ペタリと貼り付けて終わりだと面白くない。それに、カメラがどれだけ動いても背景が途切れなく繋がっている状態を作るには、ちょっとした工夫（というか Godot の機能）が必要だ。&lt;/p&gt;
&lt;p&gt;また、プラットフォーマーのゲームでは、大抵、背景がいくつかのレイヤーに別れており、プレイヤー（カメラ）が動いた時に、遠景のレイヤーはゆっくり動き、近景のレイヤーは速く動く、という設定により背景の奥行きが感じられる表現が採用されている。これは、いわゆるパララックスエフェクト（視差効果）というものだ。ありがたいことに Godot にはこのパララックスエフェクトを背景に適用するためのクラスが最初から用意されているので、それらのノードを追加するだけでほとんど作業は完了できる。しかも、なんと言ってもスクリプトのコーディングが不要だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 10：スタート画面を作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_10/</link>
      <pubDate>Tue, 22 Mar 2022 17:32:43 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_10/</guid>
      <description>&lt;p&gt;第10回目の今回は、ゲーム開始時に表示されるスタート画面を作る。タイトル画面、スタートメニューとも言う。&lt;/p&gt;
&lt;p&gt;それだけだと、前回と比べて簡単すぎるので、ゲーム開始時にプレイヤーキャラクターを選択できる仕組みも実装する。画面遷移のイメージは以下の通りだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;まずゲームを始めるとスタート画面が表示される。&lt;/li&gt;
&lt;li&gt;スタートボタンを押すとプレイヤーキャラクター選択画面に遷移する。&lt;/li&gt;
&lt;li&gt;プレイヤーキャラクターを選択するとゲームプレイ開始。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ということで、今回の作業は以下の通りだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 9：ゲームオーバーの仕組みを作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_9/</link>
      <pubDate>Mon, 14 Mar 2022 01:59:44 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_9/</guid>
      <description>&lt;p&gt;第9回目の今回は、ゲームオーバーの仕組みを実装していく。&lt;/p&gt;
&lt;p&gt;世に出ているプラットフォーマーゲームにはほぼ確実にゲームオーバーの仕組みが存在する。ゲームオーバーになるかもしれない緊張感がなければプラットフォーマーの面白さは激減する。だから、ゲームオーバーの実装は必要不可欠だ。さらに、ゲームオーバーの条件設定もまたゲームの難易度を左右するため非常に重要だ。&lt;/p&gt;
&lt;p&gt;一般的にゲームオーバーの条件としては、敵や敵の攻撃に一回でも当たるか、当たってヘルス（ライフ）が 0 になるか、画面下部に落下した時などにゲームオーバーになることが多い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 8：HUD を追加しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_8/</link>
      <pubDate>Fri, 04 Mar 2022 13:16:21 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_8/</guid>
      <description>&lt;p&gt;第8回目の今回は、HUD を実装していく。&lt;/p&gt;
&lt;p&gt;HUD というのは、ヘッズアップディスプレイ（Heads Up Display）の略で、ゲームプレイ中に常に画面上に表示されている UI の一つだ。例えば、プレイヤーの残りのライフ（海外での呼称 Health に合わせてこれ以降はヘルスと呼ぶ）や、獲得したスコアなどがわかりやすいだろう。HUD を実装する目的は現在のゲームの状態を視覚的にわかりやすくすることだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 7：次のレベルに遷移させよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_7/</link>
      <pubDate>Thu, 03 Mar 2022 15:11:20 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_7/</guid>
      <description>&lt;p&gt;第7回目の今回は、レベルのマップ上にスタートポイント、中間のチェックポイント、そしてエンドポイントを配置し、エンドポイントに到達した時に次のレベルに遷移する仕組みを実装していく。併せて、現在レベルシーンは「Level1」だけなので、次の「Level2」シーンも作成していく。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 6：アイテムを作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_6/</link>
      <pubDate>Sat, 19 Feb 2022 16:17:02 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_6/</guid>
      <description>&lt;p&gt;第6回目の今回は、アイテムを作る。アイテムというのは、ちょうどスーパーマリオシリーズのコインのような、当たるとポイントを獲得できてちょっと嬉しい存在だ。さらに、下から小突くとアイテムが出てくる箱、その名もアイテムボックスを作る。それぞれスクリプトで動作を制御し、最後はレベルシーンに配置するところまでやっていこう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 5：さらに敵キャラクターを作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_5/</link>
      <pubDate>Fri, 18 Feb 2022 15:00:38 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_5/</guid>
      <description>&lt;p&gt;第5回目の今回は、さらに敵キャラクターの種類を増やしていく。それぞれの敵キャラクターの動きに違いを持たせ、それらをタイルマップ上に複数配置してゲームの難易度を高めていこう。具体的に今回は以下の敵キャラクターを作成していく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バニー（うさぎ）&lt;/li&gt;
&lt;li&gt;カメレオン&lt;/li&gt;
&lt;li&gt;プラント（植物）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 4：敵キャラクターを作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_4/</link>
      <pubDate>Thu, 10 Feb 2022 01:41:29 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_4/</guid>
      <description>&lt;p&gt;第4回目の今回は、敵キャラクターの雛形となるシーンを作成し、それを継承する形で個別の敵キャラクターを一つ作っていく。そのあと、その敵キャラクターをレベルシーンに配置して、プレイヤーキャラクターに踏まれたら消えるところまで実装してみよう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 3：カメラを追加しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_3/</link>
      <pubDate>Sat, 05 Feb 2022 17:16:51 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_3/</guid>
      <description>&lt;p&gt;第3回目の今回は、プレイヤーキャラクターの動きに合わせてカメラが移動し、Part 2 の時より広いタイルマップ上をキャラクターが移動できるようにしていく。&lt;/p&gt;
&lt;p&gt;なお、2Dゲームのカメラについて、公式ドキュメントにも説明があるので、併せて確認いただくのが良いだろう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;公式オンラインドキュメント：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://docs.godotengine.org/ja/stable/classes/class_camera2d.html&#34; target=&#34;_blank&#34;&gt;Camera2D&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るプラットフォーマー Part 2：タイルマップを作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_2/</link>
      <pubDate>Fri, 04 Feb 2022 13:30:38 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_2/</guid>
      <description>&lt;p&gt;今回は、第2回ということで、ゲームのプレイ画面にタイルマップを配置してプレイヤーが動き回る舞台を作っていく。&lt;/p&gt;
&lt;p&gt;なお、タイルマップについては、公式ドキュメントでも説明があるので、併せて確認いただくのが良いだろう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;公式オンラインドキュメント：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://docs.godotengine.org/ja/stable/tutorials/2d/using_tilemaps.html&#34; target=&#34;_blank&#34;&gt;Using TileMaps&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo：&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/&#34; title=&#34;Godot で作るプラットフォーマー&#34;&gt;Godot で作るプラットフォーマー&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot3 で作るプラットフォーマー Part 1：プレイヤーキャラクターを作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_1/</link>
      <pubDate>Sat, 29 Jan 2022 23:38:27 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0005_platformer/platformer_1/</guid>
      <description>&lt;p&gt;このチュートリアルシリーズでは、スーパーマリオのような横スクロールアクションゲーム、いわゆる「プラットフォーマー」というジャンルのゲームを作っていく。今回は、初回ということで、ゲームのプレイ画面にプレイヤーキャラクターを用意して操作するところまでやってみよう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:teal&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
ゲームを作り始めるのに以下の記事もお役立てください。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0001_download/&#34; title=&#34;Godot をダウンロードする&#34;&gt;Godot をダウンロードする&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0002_project_manager/&#34; title=&#34;Godot のプロジェクトマネージャー&#34;&gt;Godot のプロジェクトマネージャー&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0003_change_language/&#34; title=&#34;Godot の言語設定&#34;&gt;Godot の言語設定&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩しシリーズ&#34;&gt;Godot で作るブロック崩しシリーズ&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>📔 ゲーム開発を始めるのに年齢は関係ない</title>
      <link>https://www.peanuts-code.com/ja/posts/post0001_no_matter_how_old/</link>
      <pubDate>Sun, 16 Jan 2022 16:56:41 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/posts/post0001_no_matter_how_old/</guid>
      <description>&lt;p&gt;ゲーム開発を始めてみたいけど、年齢を理由に諦める人がなんと多いことか。いや、これはゲーム開発に限らない。ピアノを始めてみたい、YouTuberを始めてみたい、など、あらゆることに当てはまるだろう。&lt;/p&gt;
&lt;p&gt;中年になると、なにかと体力や気力が衰える、という認識はなぜだか割と一般的だ。しかし、本当はそうじゃない。その社会通念が自分に当てはまる根拠はどこにもないのだ。むしろ、中年サラリーマンだろうが、小学1年生だろうが、御年90歳だろうが、年齢は関係ない。やりたいと思ったその瞬間こそ、やり始めるのに一番若いタイミングなのだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 15：プロジェクトをエクスポートしよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_15/</link>
      <pubDate>Mon, 10 Jan 2022 00:18:03 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_15/</guid>
      <description>&lt;p&gt;Part 15 の今回は、これまで開発してきたブロック崩しのプロジェクトをエクスポートして、開発者以外にもプレイしてもらえるようにする。エクスポートの作業は基本的に、ゲームが完成した段階でそのゲームを配布するために行う。&lt;/p&gt;
&lt;p&gt;友人、知人にエクスポートしたゲームファイルをそのまま渡すこともあるかもしれないが、一般的には、ゲームのプラットフォーム（Windows や Linux の PC、macOS コンピュータ、Nintendo Switch などのコンソール、iOS や Android などのモバイルなど）ごとに Web で販売できるサイトが存在するので、そこにエクスポートしたファイルをアップロードして、世界中から自分の作ったゲームをダウンロードしてもらえるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 14：ブロックの種類を増やしてレベルをデザインしよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_14/</link>
      <pubDate>Fri, 31 Dec 2021 02:09:21 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_14/</guid>
      <description>&lt;p&gt;Part 14 の今回は、ブロック崩しのブロックの種類を増やして、複数のレベル（ステージ）をデザインしていく。併せてゲームクリア画面も作成する。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ブロックの種類を増やす&#34;&gt;ブロックの種類を増やす&lt;/h1&gt;
&lt;p&gt;今回用意するブロックの種類は、オーソドックスに以下の3種類とする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 13：ハイスコアのデータを保存しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_13/</link>
      <pubDate>Thu, 23 Dec 2021 16:55:59 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_13/</guid>
      <description>&lt;p&gt;Part 13 の今回は、ブロック崩しの HUD にハイスコア、ハイレベル（過去最高クリアレベルのことをこう呼ぶことにする）の要素を追加し、ゲームオーバーになった時点でそのデータが自動的に保存されるようにして、一度ゲームを終了しても記録が消えない仕組みを作っていく。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 12：BGMとサウンドエフェクトを追加しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_12/</link>
      <pubDate>Sun, 19 Dec 2021 00:21:13 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_12/</guid>
      <description>&lt;p&gt;Part 12 の今回は、ブロック崩しにBGMとサウンドエフェクト（効果音）を追加していく。今回のチュートリアルにはいつもの GIF ではなく mp4 の動画を載せている。この記事の閲覧環境は様々だと思われるため、デフォルトでは音をミュートしている。動画のコントローラでミュート解除していただきつつ、確認いただければと思う。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 11：パワーアップを実装しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_11/</link>
      <pubDate>Sat, 11 Dec 2021 13:36:54 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_11/</guid>
      <description>&lt;p&gt;Part 11 の今回は、ブロック崩しにパワーアップ機能を実装していく。前回の Part 11 でブロックを消すとパワーアップアイテムが落ちてきて、パドルとアイテムが衝突するとパワーアップが適用される、という仕組みの部分を作ったので、今回は個々のパワーアップ機能自体を実装する。&lt;/p&gt;
&lt;p&gt;具体的には以下のパワーアップ機能をそれぞれ作っていく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slow: ボールのスピードを初期値に戻す（遅くする）&lt;/li&gt;
&lt;li&gt;Expand: 一定時間、パドルを横に伸ばす&lt;/li&gt;
&lt;li&gt;Multiple: 一定時間、複数のボールを発射できるようにする&lt;/li&gt;
&lt;li&gt;Laser: 一定時間、レーザービームを発射できるようにする&lt;/li&gt;
&lt;li&gt;Life: ライフを一つ増やす（ライフ数の最大は 5）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 10：パワーアップアイテムをドロップさせよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_10/</link>
      <pubDate>Thu, 02 Dec 2021 22:49:34 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_10/</guid>
      <description>&lt;p&gt;Part 10 の今回は、ブロック崩しにパワーアップアイテムを追加していく。ブロックを崩すとアイテムが落ちてきて、パドルとアイテムが衝突するとパワーアップが適用される、という仕組みの部分を実装していこう。&lt;/p&gt;
&lt;p&gt;なお、パドルを大きくしたり、複数のボールを発射できるなど、いくつかのパワーアップを用意していく予定だが、個々のパワーアップの実装については、次回の Part 11 で説明させていただくこととする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 9：アニメーションを追加しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_9/</link>
      <pubDate>Thu, 02 Dec 2021 22:49:34 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_9/</guid>
      <description>&lt;p&gt;Part 9 の今回は、ブロック崩しの一部の要素にアニメーションを追加する。全てのオブジェクトをアニメーションさせると作業量が膨大になるので、今回はパドルとブロックに対象を絞ってに簡単なアニメーションを追加していく。&lt;/p&gt;
&lt;p&gt;なお、アニメーションについては &lt;a href=&#34;https://docs.godotengine.org/ja/stable/getting_started/step_by_step/animations.html&#34; target=&#34;_blank&#34;&gt;Godot 公式ドキュメントの「ステップ・バイ・ステップ」のチュートリアル&lt;/a&gt;
にもある程度わかりやすく掲載しているので、そちらも参考にしていただきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 8：ポーズ画面を作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_8/</link>
      <pubDate>Mon, 29 Nov 2021 17:02:30 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_8/</guid>
      <description>&lt;p&gt;Part 8 の今回は、ゲームをプレイ中にポーズ（一時停止）する機能とポーズ画面を作っていく。といっても作業はこれまでのおさらい的内容が多くなっているので、気楽にやってみてほしい。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 7：HUDを作って表示内容を更新してみよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_7/</link>
      <pubDate>Tue, 23 Nov 2021 23:45:05 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_7/</guid>
      <description>&lt;p&gt;Part 7 の今回は、HUD（ヘッドアップディスプレイ）を作っていく。HUD というのは、例えば、プレイヤーのライフゲージやスコア、残り時間、レベル（ステージ）の番号などのように、ゲームプレイ画面に常に表示されているもののことだ。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 6：ゲームスタート/ゲームオーバーの画面を作ろう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_6/</link>
      <pubDate>Sun, 21 Nov 2021 13:39:21 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_6/</guid>
      <description>&lt;p&gt;Part 6 の今回は、ゲームスタート画面とゲームオーバーの画面を作り、それらとプレイ画面との間で適宜、画面が遷移するようにしていく。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h1 id=&#34;スタート画面を作る&#34;&gt;スタート画面を作る&lt;/h1&gt;
&lt;p&gt;ゲームを開始した時、ゲームタイトルが表示され、ボタンを押すなり何らかの操作によってプレイ画面に遷移するのが一般的だし、プレイヤーにとってもそのような流れが馴染み深く、わかりやすいはずだ。では実際にブロック崩しでもスタート画面を作ってプレイ画面へ遷移するようにアップデートしていこう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 5：細かい更新をしてゲーム性を高めよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_5/</link>
      <pubDate>Wed, 17 Nov 2021 12:23:06 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_5/</guid>
      <description>&lt;p&gt;Part 5 の今回は、パドルが壁を通過してしまう問題の修正、衝突するたびにボールのスピードが上がる仕様に変更、プレイヤーの操作でボールが発射される仕様に変更、パドル上のボールが当たった位置によってボールの反射角度が変わる仕様に変更、ついて更新していく。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 4：ブロックを配置してボールを当てて消そう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_4/</link>
      <pubDate>Wed, 10 Nov 2021 17:05:50 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_4/</guid>
      <description>&lt;p&gt;Part 4 の今回は、ブロックのオブジェクトを作って、それを画面上に複数配置し、ボールがそのブロックに衝突したらブロックが消えるようにしていく。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ブロックのシーンを作る&#34;&gt;ブロックのシーンを作る&lt;/h1&gt;
&lt;p&gt;ブロックを画面に複数配置していくことを考えると、毎回メインシーンにブロック用の子ノードを追加するのは効率的ではないし、ブロックのノードに仕様変更の必要が生じた場合、一つ一つのブロックを修正するのは大変だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 3：壁を作ってボールを跳ね返らせよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_3/</link>
      <pubDate>Tue, 09 Nov 2021 16:21:24 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_3/</guid>
      <description>&lt;p&gt;Part 3 の今回は、壁を作って、ボールがその壁に衝突したら跳ね返るようにしていく。ただし、画面下部には壁は作らずにボールが落ちるようにする。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h1 id=&#34;壁を作る&#34;&gt;壁を作る&lt;/h1&gt;
&lt;p&gt;壁をゲーム画面のギリギリ外側に作っていく。シーンドックで「Game」ノードを選択して、壁となる子ノードを追加していこう。&lt;br&gt;
&lt;img alt=&#34;Gameノードを選択&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0004_breakout/breakout_3/img_1.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 2：ボールを作って発射しよう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_2/</link>
      <pubDate>Sat, 06 Nov 2021 23:11:01 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_2/</guid>
      <description>&lt;p&gt;Part 2 の今回は、ボールのオブジェクトを作って、パドルからボールを発射するところまで進めていく。&lt;/p&gt;
&lt;p&gt;それでは前回に引き続き&lt;strong&gt;ブロック崩し&lt;/strong&gt;を開発していこう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
過去のシリーズをまだご覧になっていない方は、そちらを先にご覧いただくことをおすすめします。&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/&#34; title=&#34;Godot で作るブロック崩し&#34;&gt;Godot で作るブロック崩し&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ボールを作る&#34;&gt;ボールを作る&lt;/h1&gt;
&lt;p&gt;前回の Part 1 でプレイヤーが操作するパドルを作ったので、今度はボールを作る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Godot で作るブロック崩し Part 1：パドルを作って動かそう！</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_1/</link>
      <pubDate>Sat, 06 Nov 2021 17:44:27 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0004_breakout/breakout_1/</guid>
      <description>&lt;p&gt;Part 1 の今回は、ゲームのプレイ画面にパドルを配置して動かすところまでやっていく。&lt;/p&gt;
&lt;p&gt;ところで、ゲーム開発初心者が初めて挑戦するゲームにうってつけなのが&lt;strong&gt;ブロック崩し&lt;/strong&gt;だ。ブロック崩しはシンプルながらその開発を通して、ゲーム作りの基本をたくさん学習することができるので Godot 初心者やゲーム開発初学者にとてもおすすめだ。習得したゲーム開発の基本スキルは他のジャンルのゲームでもできることばかりだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 の言語設定</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0003_change_language/</link>
      <pubDate>Mon, 01 Nov 2021 12:37:47 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0003_change_language/</guid>
      <description>Godot で表示される言語の設定を変更する手順について解説</description>
    </item>
    <item>
      <title>🤖 Godot3 のプロジェクトマネージャー</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0002_project_manager/</link>
      <pubDate>Sat, 30 Oct 2021 12:30:09 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0002_project_manager/</guid>
      <description>ゲームエンジン Godot のプロジェクトマネージャーでできる操作のあれこれを解説</description>
    </item>
    <item>
      <title>🤖 Godot をダウンロードする</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0001_download/</link>
      <pubDate>Mon, 25 Oct 2021 00:15:11 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0001_download/</guid>
      <description>ゲームエンジン Godot のダウンロード手順を解説</description>
    </item>
  </channel>
</rss>
