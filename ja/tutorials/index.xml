<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>🤖 チュート on Peanuts Code</title>
    <link>https://www.peanuts-code.com/ja/tutorials/</link>
    <description>Recent content in 🤖 チュート on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.139.3</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/ja/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🤖 2Dグリッドベース移動</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0010_2d_grid_based_movement/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0010_2d_grid_based_movement/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;このチュートリアルでは Godot で 2D ゲームにおける「グリッドベース移動」を実装してみます。できるだけシンプルに。&lt;/p&gt;
&lt;p&gt;そもそもグリッドベース移動って何なん？という方もいらっしゃるかと。グリッドベース移動とは、グリッド（格子状の線）で等間隔に区分されたゲームの画面上をキャラクターなどのオブジェクトが 1 グリッド（1 マス）ずつ移動する動きのことです。&lt;/p&gt;
&lt;p&gt;少し昔のゲームを例にあげて恐縮ですが、「ファイヤーエムブレムシリーズ」「タクティクスオウガ」など、シミュレーションゲームでよく見かけます。あとは「ファイナルファンタジー」や「ドラゴンクエスト」シリーズなどの RPG も 2D グラフィック時代は、マップ上のキャラクター移動を観察すると、グリッドベース移動を行っています。テトリスなんかのパズルゲームでもピースやブロックの移動がグリッドベースになっていることが結構あります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 TileMapLayerでタイルマップを作る</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0024_tilemaplayer/</link>
      <pubDate>Fri, 23 Aug 2024 13:55:22 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0024_tilemaplayer/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;Godot 4.3 から、従来使われてきた TileMap クラスが Deprecated（今後もうアップデートされないってこと）になって、その代わりに TileMapLayer クラスが新たに追加されました。ということで、TileMapLayer で実際にタイルマップを作ってみたいと思います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;記事作成当時の筆者の環境&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot のバージョン: &lt;strong&gt;4.3&lt;/strong&gt;&lt;br&gt;
コンピュータのモデル: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;h2 id=&#34;画面の大きさを設定する&#34;&gt;画面の大きさを設定する&lt;/h2&gt;
&lt;p&gt;今回は 16 x 16 px のタイル画像を使うので、Viewport は小さめにしてタイルがちょうど収まるサイズにしますね。プロジェクトを新規作成したら、プロジェクト設定 &amp;gt; 一般タブ &amp;gt; Window で以下のように設定しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Xcode から App Store Connect にゲームを配布する</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0023_distribute_app_from_xcode/</link>
      <pubDate>Mon, 13 May 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0023_distribute_app_from_xcode/</guid>
      <description>&lt;p&gt;この記事では、Godot から書き出した iOS 版のゲームを Xcode から App Store Connect にアップロードする方法について説明するで。たぶん、手短に終わるから気楽にみてくれたらええよ。ほんで、多分わかってくれてると思うけど Xcode って macOS 専用のアプリやから、Mac 持ってるの前提で話進めるからね。Mac はお高いんやけど、iOS とか macOS とかのアプリを App Store でリリースしたかったら絶対要る道具やから、Orico ローンとかで買ってもいいんちゃうかな。知らんけど。僕は Orico ローンの 2 年払いで買ったわ。なかなか苦しかったけどね😆&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Game Center プラグインを追加したあとの実装</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0022_implement_game_center/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0022_implement_game_center/</guid>
      <description>&lt;p&gt;前回の &lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0021_game_center_plugin/&#34; title=&#34;プロジェクトに Game Center プラグインを追加する&#34;&gt;🤖 プロジェクトに Game Center プラグインを追加する&lt;/a&gt;
 の記事では Godot 公式の iOS プラグインのうち Game Center のプラグインをプロジェクトに追加する手順について説明したんやけど、今回の記事では、その追加したプラグインを使って、実際に Apple の Game Center の機能を実装する方法について書いてるで。&lt;/p&gt;
&lt;p&gt;そもそも Game Center って何？って人がいるかもしれんけど、前回の記事の冒頭で軽く説明してるから、よかったら先にそっち見てみてな。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 プロジェクトに Game Center プラグインを追加する</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0021_game_center_plugin/</link>
      <pubDate>Wed, 01 May 2024 20:17:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0021_game_center_plugin/</guid>
      <description>&lt;p&gt;この記事では、Apple の Game Center と連携させるための Godot 公式プラグインをプロジェクトに追加する方法について説明していくで。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ちなみに、今までの記事は「である」調で書いてたんやけど、ちょっと堅苦しくて偉そうやったから、今回から、口語調というか、おもいっきり普段のタメ語の関西弁で書いていくことにしたんやわ。今までの記事を読んでくれてたみんなにはビビらせてしまうかもしれんけど、まあ、普通の文章書くんなら ChatGPT のほうが上手に書きよるから、ちょっと人間らしさ出してこや、って感じやねん。関西弁アレルギーの人はほんまゴメンやで。&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 のサウンドリソースをプログラムで切り替える方法</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0020_switching_sound_resources/</link>
      <pubDate>Tue, 18 Oct 2022 20:17:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0020_switching_sound_resources/</guid>
      <description>&lt;p&gt;この記事では、「AudioStreamPlayer」ノード 1 つで複数のサウンドリソース（音楽や効果音のファイル）を切り替えて再生する方法を説明する。&lt;/p&gt;
&lt;p&gt;基本的に、「AudioStreamPlayer」系のクラスは、ノード１つに対して、設定できるサウンドリソースは１つだけだ。つまり、サウンドリソースの数だけシーンツリー内に「AudioStreamPlayer」ノードを追加しなければならない。サウンドリソース以外全て同じ設定のノードがシーンツリー内に複数存在する（以下のスクリーンショットのような）状況には無駄を感じるだろうし、またシーンドックの視認性が悪くて少し嫌になるかもしれない。&lt;br&gt;
&lt;img alt=&#34;project settings - window size&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0020_switching_sound_resources/img0.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るアニメーションステートマシン</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0019_2d_animation_state_machine/</link>
      <pubDate>Thu, 13 Oct 2022 16:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0019_2d_animation_state_machine/</guid>
      <description>&lt;p&gt;今回のテーマは 2D ゲームのアニメーションステートマシンの実装だ。ステートとは「状態」のことで、ステートマシンというのは、キャラクターのある状態からある状態への遷移を制御する仕組みのことだ。&lt;/p&gt;
&lt;p&gt;ある状態からは限られた状態にしか遷移できなかったり、状態によって今のアニメーションが終了してから次の状態に遷移させるのか、ただちに遷移させるのかの違いがある。例えば、「idle（待機）」と「run（移動）」はただちに双方向に遷移するが、「idle」から「attack（攻撃）」へはただちに遷移しても「attack」から「run」へは遷移せず、また「attack」から「idle」へは「attack」のアニメーションが終わってから遷移する、といった具合だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る 2D ゲームの近接攻撃の当たり判定</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0018_melee_attacks/</link>
      <pubDate>Mon, 03 Oct 2022 22:55:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0018_melee_attacks/</guid>
      <description>&lt;p&gt;この記事では、2Dゲームにおけるシンプルな近接攻撃の当たり判定を実装する方法を紹介する。&lt;/p&gt;
&lt;p&gt;一般的によく使われる手法で、攻撃するオブジェクト（プレイヤーキャラクターなど）に攻撃時のみ有効になる衝突形状（Hit Box という）を用意し、攻撃を受けるオブジェクト（敵キャラクターや破壊できる樽や木箱、草など）には攻撃を受ける範囲となる衝突形状（Hurt Box という）を用意し、攻撃時のアニメーションに合わせて、Hit Box と Hurt Box の有効/無効の切り替えやサイズ、位置の変更をすることで攻撃の当たり判定を実装することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る 2D グリッドベース経路探索</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0017_2d_grid_based_path_finding/</link>
      <pubDate>Mon, 19 Sep 2022 02:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0017_2d_grid_based_path_finding/</guid>
      <description>&lt;p&gt;この記事では、AStar というアルゴリズムを利用して、2D ゲームにおけるグリッドベースの経路探索の実装方法について紹介する。なお、グリッドベースではない 2D 経路探索については、「&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0016_2d_path_finding/&#34; title=&#34;Godot で作る 2D 経路探索&#34;&gt;Godot で作る 2D 経路探索&lt;/a&gt;
」の記事で紹介しているので、作りたいゲームに併せて記事を選んでいただければ幸いだ。&lt;/p&gt;
&lt;p&gt;このチュートリアルで最後にできあがるプロジェクトのファイルは &lt;a href=&#34;https://github.com/msnsk/2DGridBasedPathFInding.git&#34; target=&#34;_blank&#34;&gt;GitHubリポジトリ&lt;/a&gt;
 に置いている。.zipファイルをダウンロードして展開したあと、「project.godot」ファイルを Godot Engine でインポートしていただければ、直接プロジェクトを確認していただくことも可能だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る 2D 経路探索</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0016_2d_path_finding/</link>
      <pubDate>Mon, 15 Aug 2022 02:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0016_2d_path_finding/</guid>
      <description>&lt;p&gt;このチュートリアルでは 2D ゲームにおける経路探索 (Path Finding) について紹介する。経路探索というのは、例えばあるオブジェクトをある目的地へ移動させる際に、オブジェクトから目的地までの移動可能な最短経路を割り出す機能だ。なお、AStar というアルゴリズムを利用したグリッドベースの経路探索については「&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0017_2d_grid_based_path_finding/&#34; title=&#34;Godot で作る 2D グリッドベース経路探索&#34;&gt;Godot で作る 2D グリッドベース経路探索&lt;/a&gt;
」の記事で紹介している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る円形プログレスバー</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0015_circular_progress_bar/</link>
      <pubDate>Fri, 05 Aug 2022 11:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0015_circular_progress_bar/</guid>
      <description>&lt;p&gt;今回は、円形のプログレスバーの作り方を紹介する。プログレスバーを、一般的な縦向きや横向きではなく、円形にすることによって、画面上のちょっとしたアクセントにもなるので使い所があれば是非参考にしていただきたい。また、チュートリアルの最後のほうで、円形以外の形状（例えばハート型）のプログレスバーもサンプルとしていくつか紹介するのでそちらも興味があればぜひご覧いただきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る画面揺れ</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0014_screen_shake/</link>
      <pubDate>Thu, 28 Jul 2022 14:10:56 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0014_screen_shake/</guid>
      <description>&lt;p&gt;今回の記事では、2Dゲームでの画面揺れの実装方法を紹介する。ゲームに絶対に必要な要素ではないが、うまく使えばプレイヤーのゲーム体験をよりインタラクティブにでき、ユーザエクスペリエンスに直接影響を与えることができる。例えば、銃を撃った時や敵からダメージを受けた時、高いところから落ちた時など、使えそうな場面は山ほどある。ちなみに、このような必要ではないものの追加することでゲームをより面白くする要素を、英語圏ではゲーム・ジュース[Game Juice]といい、またそうすることをジューシング[Juicing]というようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る進化形マッチ 3 パズルゲーム</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0013_advanced_match3/</link>
      <pubDate>Sun, 10 Jul 2022 00:51:37 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0013_advanced_match3/</guid>
      <description>&lt;p&gt;今回のチュートリアルでは、進化形マッチ3パズルゲームと銘打って、盤面上で１つのピースを一定時間（数秒間）自由に動かして同じ色のピースを３つ以上並べて消すタイプのパズルゲームをを作っていく。&lt;/p&gt;
&lt;p&gt;これはモバイルゲームで人気を博した「パズル&amp;amp;ドラゴンズ（Puzzle &amp;amp; Dragons）/ 通称パズドラ」のようなパズルをイメージしていただくとわかりやすいだろう。&lt;/p&gt;
&lt;p&gt;ただし、チュートリアルに味方のデッキやガチャ、敵キャラクターとのバトルなど全てのゲーム要素を盛り込むとボリュームが大きすぎるので、今回はパズル部分にフォーカスして手順を説明させていただく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るマッチ 3 パズルゲーム</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0012_match3/</link>
      <pubDate>Sun, 26 Jun 2022 03:18:03 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0012_match3/</guid>
      <description>&lt;p&gt;今回のチュートリアルではマッチ3パズルゲームを作っていく。マッチ3（スリー）パズルゲームとは、盤面のグリッドに沿って均一に並べられた複数のカラフルなピースのうちの１つを、1マス動かして同じ色のピースを３つ以上並べて消すタイプのパズルゲームの総称だ。うまく動かすと、一回の操作で連続的に複数のピースを消すことができ、なんとも気持ちの良いプレイ感覚を味わうことができる。簡単な操作で気軽に楽しめるため、モバイルゲームで特に人気のあるジャンルだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る同じ色をつなげて消すパズルゲーム</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0011_connect_colors/</link>
      <pubDate>Tue, 14 Jun 2022 22:43:45 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0011_connect_colors/</guid>
      <description>&lt;p&gt;このチュートリアルでは、スマホゲームで大人気の ディズニーツムツムのような同じ色のドロップをなぞってつなげて消すタイプのゲームの作り方を説明する。ちなみにディズニーツムツムを知らない方は以下のリンク先を一度ご覧いただきたい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.disney.co.jp/games/dtt.html&#34; target=&#34;_blank&#34;&gt;LINE：ディズニー ツムツム&lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Other Tutorials&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
「パズル＆ドラゴンズ」のようなゲームを作ってみたい場合：&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0013_advanced_match3/&#34; title=&#34;Godot で作る進化形マッチ 3 パズルゲーム&#34;&gt;Godot で作る進化形マッチ 3 パズルゲーム&lt;/a&gt;
&lt;br&gt;
「キャンディークラッシュ」のようなゲームを作ってみたい場合：&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/ja/tutorials/gd0012_match3/&#34; title=&#34;Godot で作るマッチ 3 パズルゲーム&#34;&gt;Godot で作るマッチ 3 パズルゲーム&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るホーミングミサイル</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0008_homing_missiles/</link>
      <pubDate>Fri, 27 May 2022 17:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0008_homing_missiles/</guid>
      <description>&lt;p&gt;このチュートリアルでは、2Dトップダウンシューティングにおける「ホーミングミサイル」を作っていく。ホーミングミサイルというのは、ターゲットを追跡するミサイルのことだ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
このチュートリアルは以下の環境で作成しました。&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot のバージョン: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;コンピュータのOS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;このチュートリアルでは、ホーミングミサイルの作成にフォーカスするため、それ以外の部分は事前に下準備として作成済みだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作る弾幕シューティングの弾幕</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0007_bullethell/</link>
      <pubDate>Sat, 21 May 2022 17:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0007_bullethell/</guid>
      <description>&lt;p&gt;このチュートリアルでは、2Dトップダウンシューティングゲームの「弾幕」を作っていく。弾幕というのは、敵キャラクターから放たれる大量の弾（またはそれに類似する遠距離攻撃）のことで、弾が幕のように隙間なく飛んでくるので「弾幕」という。プレイヤーはその隙間を縫うようにうまくかわしながら、敵キャラクターを射撃して倒していくゲームを弾幕シューティングゲームという。単に弾幕をかわすことに特化したゲームもある。イメージに合う宇宙船や戦闘機をモチーフにしたゲームが多いのも特徴だ（今回は魔法使いとモンスターの地上戦だが）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 で作るトップダウンシューティングの 4 種類の銃</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0006_guns_of_topdown_shooter/</link>
      <pubDate>Wed, 04 May 2022 01:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0006_guns_of_topdown_shooter/</guid>
      <description>&lt;p&gt;このチュートリアルでは、2Dトップダウンシューティングゲーム（見下ろし型シューティングゲーム）で一般的によく登場する銃を4種類作っていく。具体的には以下の通りだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ハンドガン&lt;/li&gt;
&lt;li&gt;ショットガン&lt;/li&gt;
&lt;li&gt;マシンガン&lt;/li&gt;
&lt;li&gt;レーザーガン&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
このチュートリアルは以下の環境で作成しました。&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot のバージョン: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;コンピュータのOS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;このチュートリアルでは、銃の作成にフォーカスするため、以下は予め用意しておいた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 エディタの便利な検索機能</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0009_various_searches/</link>
      <pubDate>Mon, 25 Apr 2022 17:08:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0009_various_searches/</guid>
      <description>&lt;p&gt;Godot でゲームのプロジェクトを作っていると、そのうちゲームの規模がある程度大きくなった時に、ファイルシステムドックですぐに編集したいシーンが見つからなかったり、さっき修正しようと思っていたスクリプトがどこに行ったかわからなくなったりすることがあるかもしれない。&lt;/p&gt;
&lt;p&gt;今回は Godot エディタに備わっているキーボードショートカットでの便利な検索機能を紹介する。これらを知っているだけで「見つからない何かを探す」という、おそらく最も楽しくない時間を激減させることができるだろう。なんなら、ファイルシステムやスクリプトエディタで直接ファイルにカーソルを合わせてクリックして選択していた手順を、毎回検索する手順に切り替えてしまっても良いだろう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Godot3 の言語設定</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0003_change_language/</link>
      <pubDate>Mon, 01 Nov 2021 12:37:47 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0003_change_language/</guid>
      <description>Godot で表示される言語の設定を変更する手順について解説</description>
    </item>
    <item>
      <title>🤖 Godot3 のプロジェクトマネージャー</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0002_project_manager/</link>
      <pubDate>Sat, 30 Oct 2021 12:30:09 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0002_project_manager/</guid>
      <description>ゲームエンジン Godot のプロジェクトマネージャーでできる操作のあれこれを解説</description>
    </item>
    <item>
      <title>🤖 Godot をダウンロードする</title>
      <link>https://www.peanuts-code.com/ja/tutorials/gd0001_download/</link>
      <pubDate>Mon, 25 Oct 2021 00:15:11 +0900</pubDate>
      <guid>https://www.peanuts-code.com/ja/tutorials/gd0001_download/</guid>
      <description>ゲームエンジン Godot のダウンロード手順を解説</description>
    </item>
  </channel>
</rss>
