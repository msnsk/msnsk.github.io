<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>TileMap on Peanuts Code</title>
    <link>https://www.peanuts-code.com/en/tags/tilemap/</link>
    <description>Recent content in TileMap on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.134.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/en/tags/tilemap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ðŸ¤– Implementing 2D Grid-Based Movement</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial, we are going to implement a &amp;ldquo;grid-based movement&amp;rdquo; system for a 2D game in Godot. It&amp;rsquo;s not overly complex.&lt;/p&gt;
&lt;p&gt;Some of you might be wondering, what exactly is grid-based movement? Grid-based movement is when objects, such as characters, move one grid (one tile) at a time on a game screen that is divided into evenly spaced grid lines.&lt;/p&gt;
&lt;p&gt;To give some examples, think of older games like the &lt;em&gt;Fire Emblem&lt;/em&gt; series, &lt;em&gt;Tactics Ogre&lt;/em&gt;, or various simulation games. Even RPGs like &lt;em&gt;Final Fantasy&lt;/em&gt; and &lt;em&gt;Dragon Quest&lt;/em&gt; during their 2D eras employed grid-based movement when it came to character movement on maps. Puzzle games like &lt;em&gt;Tetris&lt;/em&gt; often use grid-based movement for the blocks or pieces as well.&lt;/p&gt;
&lt;p&gt;As you can see, grid-based movement is widely used across many genres of games, making it a highly versatile feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created under the following environment:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Godot version: &lt;strong&gt;4.3&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Computer OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the way, the project I made can be found in this &lt;a href=&#34;https://github.com/msnsk/GridBasedMovement.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ðŸ¤– Making a Tilemap with TileMapLayer</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</link>
      <pubDate>Fri, 23 Aug 2024 13:55:22 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;With Godot 4.3, the previously used TileMap class has been deprecated (meaning it won&amp;rsquo;t be updated anymore), and a new TileMapLayer class has been added in its place. So, I&amp;rsquo;m going to actually create a tilemap using TileMapLayer!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;My environment at the time of writing&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot version: &lt;strong&gt;4.3&lt;/strong&gt;&lt;br&gt;
Computer model: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;h2 id=&#34;setting-the-screen-size&#34;&gt;Setting the Screen Size&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll be using 16x16 px tile images this time, so I&amp;rsquo;ll make the Viewport small enough to fit the tiles neatly. After creating a new project, I went to Project Settings &amp;gt; General tab &amp;gt; Window and set the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size:
&lt;ul&gt;
&lt;li&gt;Viewport Width: 256&lt;/li&gt;
&lt;li&gt;Viewport Height: 160&lt;/li&gt;
&lt;li&gt;Window Width Override: 1024 (4 times)&lt;/li&gt;
&lt;li&gt;Window Height Override: 640 (4 times)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span style=&#34;font-size: 0.75em; font-weight: 600; color: #7a7a7a; margin-bottom: 1em; display: inline-block;&#34;&gt;*Window Width Override and Window Height Override can be set after enabling Advanced Settings in the top right of the settings panel.&lt;/span&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0024/01a.png&#34;
         alt=&#34;Screen size settings&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Then I scrolled down a bit in the settings panel and set the stretch mode to &lt;strong&gt;viewport&lt;/strong&gt; so that the game graphics scale to fit the window size. I left the aspect ratio as is.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
