<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2D on Peanuts Code</title>
    <link>https://www.peanuts-code.com/en/tags/2d/</link>
    <description>Recent content in 2D on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.139.3</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/en/tags/2d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🤖 2D Grid-Based Movement</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial, we are going to implement a &amp;ldquo;grid-based movement&amp;rdquo; system for a 2D game in Godot. It&amp;rsquo;s not overly complex.&lt;/p&gt;
&lt;p&gt;Some of you might be wondering, what exactly is grid-based movement? Grid-based movement is when objects, such as characters, move one grid (one tile) at a time on a game screen that is divided into evenly spaced grid lines.&lt;/p&gt;
&lt;p&gt;To give some examples, think of older games like the &lt;em&gt;Fire Emblem&lt;/em&gt; series, &lt;em&gt;Tactics Ogre&lt;/em&gt;, or various simulation games. Even RPGs like &lt;em&gt;Final Fantasy&lt;/em&gt; and &lt;em&gt;Dragon Quest&lt;/em&gt; during their 2D eras employed grid-based movement when it came to character movement on maps. Puzzle games like &lt;em&gt;Tetris&lt;/em&gt; often use grid-based movement for the blocks or pieces as well.&lt;/p&gt;
&lt;p&gt;As you can see, grid-based movement is widely used across many genres of games, making it a highly versatile feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created under the following environment:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Godot version: &lt;strong&gt;4.3&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Computer OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the way, the project I made can be found in this &lt;a href=&#34;https://github.com/msnsk/GridBasedMovement.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
.&lt;/p&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;h2 id=&#34;setting-up-the-window&#34;&gt;Setting Up the Window&lt;/h2&gt;
&lt;p&gt;After creating a new project in Godot, the first step is to adjust the project settings. Open the &lt;strong&gt;Project&lt;/strong&gt; menu and select &lt;strong&gt;Project Settings&lt;/strong&gt;. From the &lt;strong&gt;General&lt;/strong&gt; tab, navigate to &lt;strong&gt;Display&lt;/strong&gt; &amp;gt; &lt;strong&gt;Window&lt;/strong&gt; in the sidebar, and set the window size and stretch options as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Making a Tilemap with TileMapLayer</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</link>
      <pubDate>Fri, 23 Aug 2024 13:55:22 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;With Godot 4.3, the previously used TileMap class has been deprecated (meaning it won&amp;rsquo;t be updated anymore), and a new TileMapLayer class has been added in its place. So, I&amp;rsquo;m going to actually create a tilemap using TileMapLayer!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;My environment at the time of writing&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot version: &lt;strong&gt;4.3&lt;/strong&gt;&lt;br&gt;
Computer model: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;h2 id=&#34;setting-the-screen-size&#34;&gt;Setting the Screen Size&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll be using 16x16 px tile images this time, so I&amp;rsquo;ll make the Viewport small enough to fit the tiles neatly. After creating a new project, I went to Project Settings &amp;gt; General tab &amp;gt; Window and set the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size:
&lt;ul&gt;
&lt;li&gt;Viewport Width: 256&lt;/li&gt;
&lt;li&gt;Viewport Height: 160&lt;/li&gt;
&lt;li&gt;Window Width Override: 1024 (4 times)&lt;/li&gt;
&lt;li&gt;Window Height Override: 640 (4 times)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span style=&#34;font-size: 0.75em; font-weight: 600; color: #7a7a7a; margin-bottom: 1em; display: inline-block;&#34;&gt;*Window Width Override and Window Height Override can be set after enabling Advanced Settings in the top right of the settings panel.&lt;/span&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0024/01a.png&#34;
         alt=&#34;Screen size settings&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Then I scrolled down a bit in the settings panel and set the stretch mode to &lt;strong&gt;viewport&lt;/strong&gt; so that the game graphics scale to fit the window size. I left the aspect ratio as is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Animation State Machine in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</link>
      <pubDate>Fri, 14 Oct 2022 20:25:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</guid>
      <description>&lt;p&gt;This article describes an implementation of an animated state machine for a 2D game. A state machine controls the transition of an object from one state to another.&lt;/p&gt;
&lt;p&gt;There are several restrictions on state transitions, such as when an object can only transition from one state to a limited number of states, or when an object can only transition to the next state after the current animation ends. For example, &amp;ldquo;idle&amp;rdquo; and &amp;ldquo;run&amp;rdquo; can transition immediately in both directions, but &amp;ldquo;idle&amp;rdquo; to &amp;ldquo;attack&amp;rdquo; can transition immediately, but &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;run&amp;rdquo; cannot, and &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; can transition only after the &amp;ldquo;attack&amp;rdquo; animation ends. The &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; transition occurs only after the &amp;ldquo;attack&amp;rdquo; animation is over.&lt;/p&gt;
&lt;p&gt;If all of these controls were coded in script, the code would tend to be rather long and complex. On the other hand, Godot&amp;rsquo;s &amp;ldquo;AnimationTree&amp;rdquo; node can be used to reduce the amount of script code and improve readability. In this article, we will show you how to implement a state machine using the &amp;ldquo;AnimationTree&amp;rdquo; node.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 12.6&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 2D Hit Detection for Melee Attacks in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</link>
      <pubDate>Wed, 05 Oct 2022 02:55:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</guid>
      <description>&lt;p&gt;This article introduces a method for implementing simple hit detection for melee attacks in 2D games.&lt;/p&gt;
&lt;p&gt;This is a commonly used method where the object to attack (e.g., player character) has a collision shape (called &amp;ldquo;Hit Box&amp;rdquo;) that is only active during the attack, and the object to be attacked (e.g., enemy character, destructible barrels, crates, grass, etc.) has a collision shape (called &amp;ldquo;Hurt Box). The hit judgment of the attack can be implemented by enabling/disabling the Hit Box and Hurt Box, and changing their size and position in accordance with the animation of the attack.&lt;/p&gt;
&lt;p&gt;This is relatively easy to implement, so let&amp;rsquo;s get started.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;add-actions-to-input-map&#34;&gt;Add Actions to Input Map&lt;/h2&gt;
&lt;p&gt;First, go to &amp;ldquo;Project&amp;rdquo; &amp;gt; &amp;ldquo;Project Settings&amp;rdquo; &amp;gt; &amp;ldquo;Input Map&amp;rdquo; tab and add the following actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;right: D key&lt;/li&gt;
&lt;li&gt;left: A key&lt;/li&gt;
&lt;li&gt;down: S key&lt;/li&gt;
&lt;li&gt;up: W key&lt;/li&gt;
&lt;li&gt;attack: Space bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;Input Map&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0018_melee_attacks/img1.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 2D Grid Based Path Finding in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0017_2d_grid_based_path_finding/</link>
      <pubDate>Thu, 22 Sep 2022 19:45:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0017_2d_grid_based_path_finding/</guid>
      <description>&lt;p&gt;This article is a tutorial on how to implement grid-based path finding in 2D games using the AStar algorithm. For 2D pathfinding that is not grid-based, please refer to the article &lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/&#34; title=&#34;2D Path Finding in Godot3&#34;&gt;2D Path Finding in Godot3&lt;/a&gt;
. I hope you will choose the article that best suits the game you want to make.&lt;/p&gt;
&lt;p&gt;The final project file in this tutorial is located in the &lt;a href=&#34;https://github.com/msnsk/2DGridBasedPathFInding.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. After downloading and extracting the .zip file, you can import the &amp;ldquo;project.godot&amp;rdquo; file into the Godot Engine to see the project directly.&lt;/p&gt;
&lt;p&gt;Translated with &lt;a href=&#34;https://www.DeepL.com/Translator&#34; target=&#34;_blank&#34;&gt;www.DeepL.com/Translator&lt;/a&gt;
 (free version)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;about-astar&#34;&gt;About AStar&lt;/h2&gt;
&lt;p&gt;In this article, we will implement grid-based routing using a search algorithm called AStar. It is useful when you want to automatically move objects along a grid from the current location to the destination. For example, this method is ideal for puzzle games where you move pieces on the board, or strategy simulation games where you move characters of both sides on the board to fight each other.&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 2D Path Finding in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/</link>
      <pubDate>Tue, 16 Aug 2022 23:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/</guid>
      <description>&lt;p&gt;This tutorial introduces Path Finding in 2D games. Path finding is a function that determines the shortest possible path from an object to its destination, for example, when moving an object to a certain destination.&lt;/p&gt;
&lt;p&gt;Up to Godot 3.4, the &lt;strong&gt;Navigation&lt;/strong&gt; node was used to implement path finding. This was not particularly inconvenient, but the methodology for game development using it was limited and inapplicable in some areas. This time, I would like to introduce an implementation method using &lt;strong&gt;Navigation Server&lt;/strong&gt;, which was added to Godot 3.5. This is a backport from Godot 4, which is currently under active development. This article is intended for users of Godot 3.5 or later. Users of Godot version 3.4 or earlier should take note.&lt;/p&gt;
&lt;p&gt;The final project file for this tutorial is available at &lt;a href=&#34;https://github.com/msnsk/2DPathFinding.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. You can also check the project directly by downloading the .zip file and importing the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 2D Screen Shake in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0014_screen_shake/</link>
      <pubDate>Thu, 28 Jul 2022 14:10:56 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0014_screen_shake/</guid>
      <description>&lt;p&gt;In this article, I will explain how to implement an effect, &amp;ldquo;screen shake&amp;rdquo;, in 2D games. It is not an absolutely necessary element of a game, but if used well, it can make the player&amp;rsquo;s game experience more interactive and directly affect the user experience. For example, there are many situations where it could be used, such as when a player fires a gun, takes damage from enemies, or falls from a high place.&lt;/p&gt;
&lt;p&gt;By the way, this kind of element that is not necessary but makes the game more interesting by adding it is called &amp;ldquo;game juice&amp;rdquo; in English. I have one more vocabulary in English, and I am a little wiser now.&lt;/p&gt;
&lt;p&gt;There are already many resources on the Web that explain how to implement screen shake, and of course there are methods other than those introduced here. This time, we refer to the following video and article in particular, so please check them as well for a deeper understanding.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Reference&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://youtu.be/tu-Qe66AvtY&#34; target=&#34;_blank&#34;&gt;YouTube: GDC - Math for Game Programmers: Juicing Your Cameras With Math&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://kidscancode.org/godot_recipes/2d/screen_shake/&#34; target=&#34;_blank&#34;&gt;KidsCanCode: SCREEN SHAKE&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Advanced Match 3 Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0013_advanced_match3/</link>
      <pubDate>Fri, 15 Jul 2022 18:40:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0013_advanced_match3/</guid>
      <description>&lt;p&gt;In this tutorial, we will create an advanced match-3 puzzle game, a type of puzzle game in which one piece is moved freely on the board for a certain period of time to erase three or more pieces of the same color in a row.&lt;/p&gt;
&lt;p&gt;This is easy to understand if you imagine a puzzle game like &amp;ldquo;Puzzle &amp;amp; Dragons&amp;rdquo; (a.k.a. &amp;ldquo;Puzzle Dora&amp;rdquo;), which has gained popularity as a mobile game.&lt;/p&gt;
&lt;p&gt;However, the tutorial would be too large if it included all game elements such as decks, gacha, and battles with enemy characters, so we will focus on the puzzle part of the tutorial this time.&lt;/p&gt;
&lt;p&gt;For more information on how to create an standard match-3 puzzle game like &amp;ldquo;Candy Crush&amp;rdquo; or a puzzle game like &amp;ldquo;LINE Tsum Tsum&amp;rdquo;, please refer to the following tutorial.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Other Tutorials&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
If you want to make a game like &amp;ldquo;Candy Crush&amp;rdquo;:&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0012_match3/&#34; title=&#34;Match 3 puzzle game in Godot&#34;&gt;Match 3 puzzle game in Godot&lt;/a&gt;
&lt;br&gt;
If you want to make a game like &amp;ldquo;LINE: Disney Tsum Tsum&amp;rdquo;:&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/&#34; title=&#34;Connecting matching colors puzzle game in Godot&#34;&gt;Connecting matching colors puzzle game in Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Match 3 Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0012_match3/</link>
      <pubDate>Sat, 02 Jul 2022 06:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0012_match3/</guid>
      <description>&lt;p&gt;In this tutorial, we will create a match 3 puzzle game. Match 3 is a puzzle game in which players move multiple colorful pieces evenly arranged along a grid on the board to eliminate three or more pieces of the same color in a row. This genre is particularly popular among mobile game players because it is easy to operate and enjoyable.&lt;/p&gt;
&lt;p&gt;Candy Crush, Toon Blast, and Royal Match are just a few examples of popular games. Puzzle &amp;amp; Dragons and LINE Tsum Tsum are also based on Match 3, although the controls are slightly different. In this tutorial, we will create a puzzle like Candy Crush, in which the pieces are moved only one square at a time to match colors. If you want to make a game like &amp;ldquo;LINE tsum tsum&amp;rdquo;, check another tutorial, &lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/&#34; title=&#34;Connecting matching colors puzzle game in Godot&#34;&gt;Connecting matching colors puzzle game in Godot&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;The final project file for this tutorial is located at &lt;strong&gt;&lt;a href=&#34;https://github.com/msnsk/Match3.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
&lt;/strong&gt;. If you download the .zip file and import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine, you can check the project directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Connecting Matching Colors Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/</link>
      <pubDate>Mon, 20 Jun 2022 03:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/</guid>
      <description>&lt;p&gt;In this tutorial, we will explain how to create a type of game in which you trace and erase drops of the same color, like the very popular Disney Tsum Tsum smartphone game.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.disney.co.jp/fc/tsum/tsum_en.html&#34; target=&#34;_blank&#34;&gt;LINE: Disney Tsum Tsum&lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;Note that the final project file in this tutorial is located in the &lt;a href=&#34;https://github.com/msnsk/ConnectColors.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. You can directly check the project by downloading the .zip file and importing the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine.&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot version: &lt;strong&gt;3.4.4&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Please also use the following articles to help you start creating your game.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;creating-a-new-project&#34;&gt;Creating a new project&lt;/h2&gt;
&lt;p&gt;First, we would like you to start Godot Engine and create a new project. Let&amp;rsquo;s name the project &amp;ldquo;Connect Colors Start.&lt;/p&gt;
&lt;br/&gt;
&lt;h3 id=&#34;editing-project-settings&#34;&gt;Editing project settings&lt;/h3&gt;
&lt;p&gt;Once the editor appears, let&amp;rsquo;s editing the settings for the entire project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Homing Missiles in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0008_homing_missiles/</link>
      <pubDate>Sat, 28 May 2022 18:41:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0008_homing_missiles/</guid>
      <description>&lt;p&gt;In this tutorial, we will create a homing missile in a 2D top-down shooter. A homing missile is a missile that tracks its target.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot version: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;To focus on the creation of the homing missile, the rest of the project has been pre-created in advance.&lt;/p&gt;
&lt;p&gt;The project file for this tutorial is located at &lt;strong&gt;&lt;a href=&#34;https://github.com/msnsk/HomingMissiles.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
&lt;/strong&gt;. After downloading the .zip file, import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;Start&amp;rdquo; folder into the Godot Engine, and you can start the project with only the preliminary work completed. If you would like to see the completed project in a hurry, import the &amp;ldquo;project.godot&amp;rdquo; file from the &amp;ldquo;End&amp;rdquo; folder.&lt;/p&gt;
&lt;p&gt;All the assets imported into the project were downloaded from &lt;strong&gt;&lt;a href=&#34;https://www.kenney.nl/assets&#34; target=&#34;_blank&#34;&gt;KENNEY&lt;/a&gt;
&lt;/strong&gt; website. I used an asset pack called &lt;strong&gt;&lt;a href=&#34;https://www.kenney.nl/assets/tower-defense-top-down&#34; target=&#34;_blank&#34;&gt;Tower Defense (top-down)&lt;/a&gt;
&lt;/strong&gt;. I just want to thank them for making such a great asset pack available to the public.&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;preliminary-preparation&#34;&gt;Preliminary Preparation&lt;/h2&gt;
&lt;p&gt;The following game specifications, except for the homing missile part, which is listed as (planned), have already been prepared as a preliminary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Bullet Hell in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0007_bullethell/</link>
      <pubDate>Mon, 23 May 2022 01:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0007_bullethell/</guid>
      <description>&lt;p&gt;In this time, we will create a bullet hell aka barrage for a barrage shooting game. The bullet hell is a large number of bullets (or similar long-range attacks) like a curtain. A &amp;ldquo;bullet hell shooter&amp;rdquo; is a game in which the player shoots at and defeats enemy characters while dodging and weaving through the gaps between the bullets. Some games specialize in simply dodging the bullets. Many games are based on the motif of spaceships and fighter planes that fit the image (in this tutorial, a ground battle between a wizard and a monster though).&lt;/p&gt;
&lt;p&gt;In this tutorial, we will focus only on creating a bullet hell. Also, while bullet hell come in various shapes and sizes, we will focus on rotating-type bullet hell.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot version: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;The project file for this tutorial is located at &lt;strong&gt;&lt;a href=&#34;https://github.com/msnsk/BulletHell.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
&lt;/strong&gt;. After downloading the .zip file, import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;Start&amp;rdquo; folder into the Godot Engine, and you will be able to start with a project that has only been prepped. If you would like to see the completed project in a hurry, import the &amp;ldquo;project.godot&amp;rdquo; file from the &amp;ldquo;End&amp;rdquo; folder.&lt;/p&gt;</description>
    </item>
    <item>
      <title>🤖 Four Types of Guns for Top-down Shooting in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0006_guns_of_topdown_shooter/</link>
      <pubDate>Sat, 07 May 2022 22:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0006_guns_of_topdown_shooter/</guid>
      <description>&lt;p&gt;In this tutorial, we are going to make four types of guns that commonly appear in 2D top-down shooters. Specifically, they are as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handgun&lt;/li&gt;
&lt;li&gt;Shotgun&lt;/li&gt;
&lt;li&gt;Machine gun&lt;/li&gt;
&lt;li&gt;Laser Gun&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Godot version: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
・&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;Since this tutorial will focus on gun creation, the following has been prepared in advance.&lt;/p&gt;
&lt;h4 id=&#34;1-game-world&#34;&gt;1. Game world&lt;/h4&gt;
&lt;p&gt;A scene called &amp;ldquo;World.tscn&amp;rdquo; was prepared, and the appearance was simply created by adding a &amp;ldquo;TileMap&amp;rdquo; node. In addition to the &amp;ldquo;TileMap&amp;rdquo; node, a &amp;ldquo;Player&amp;rdquo; node and several &amp;ldquo;Obstacle&amp;rdquo; nodes were added. For these, we created individual scenes and added the instances.&lt;br&gt;
&lt;img alt=&#34;World scene tree&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0006_GunsOfTopdownShooter/img0.1.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-player-character&#34;&gt;2. Player Character&lt;/h4&gt;
&lt;p&gt;Created as &amp;ldquo;Player.tscn&amp;rdquo; scene. The root node is the &amp;ldquo;KinematicBody2D&amp;rdquo; class, and the &amp;ldquo;Sprite&amp;rdquo; and the &amp;ldquo;CollisionShape2D&amp;rdquo; were added as child nodes. The texture of the &amp;ldquo;Sprite&amp;rdquo; node is a hitman with a gun. A node named &amp;ldquo;Muzzle&amp;rdquo; of the &amp;ldquo;Position2D&amp;rdquo; class was placed at the tip of the image of the gun held by the hitman. This will be used later to specify the position where the bullet instance is generated when the gun is fired.&lt;br&gt;
&lt;img alt=&#34;Player scene tree&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0006_GunsOfTopdownShooter/img0.2.png&#34;&gt;&lt;br&gt;
The following actions have already been added to the input map. Used to move the player character, shoot, and switch guns.&lt;br&gt;
- &lt;strong&gt;up&lt;/strong&gt;: W key - used to move the player character forward&lt;br&gt;
- &lt;strong&gt;down&lt;/strong&gt;: S key - used to move the player character backward.&lt;br&gt;
- &lt;strong&gt;fire&lt;/strong&gt;: Left mouse button - fires the gun.&lt;br&gt;
- &lt;strong&gt;switch&lt;/strong&gt;: Right mouse button: Switches between gun types.&lt;br&gt;
&lt;img alt=&#34;inputmap&#34; loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0006_GunsOfTopdownShooter/img1.png&#34;&gt;&lt;br&gt;
Note that, for the sake of brevity in the tutorial, the player character&amp;rsquo;s sprite remains the same, even if the gun type is changed. Let&amp;rsquo;s say it looks like a handgun, but it can be a machine gun, a laser gun, or anything else.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
