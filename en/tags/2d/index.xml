<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2D on Peanuts Code</title>
    <link>https://www.peanuts-code.com/en/tags/2d/</link>
    <description>Recent content in 2D on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.133.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 23 Aug 2024 13:55:22 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/en/tags/2d/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🤖 Making a Tilemap with TileMapLayer</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</link>
      <pubDate>Fri, 23 Aug 2024 13:55:22 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</guid>
      <description>Introduction With Godot 4.3, the previously used TileMap class has been deprecated (meaning it won&amp;rsquo;t be updated anymore), and a new TileMapLayer class has been added in its place. So, I&amp;rsquo;m going to actually create a tilemap using TileMapLayer!
My environment at the time of writing Godot version: 4.3
Computer model: MacBook Air M1, 2020
OS: macOS 14.6.1
Setting the Screen Size I&amp;rsquo;ll be using 16x16 px tile images this time, so I&amp;rsquo;ll make the Viewport small enough to fit the tiles neatly. After creating a new project, I went to Project Settings &amp;gt; General tab &amp;gt; Window and set the following:
Size: Viewport Width: 256 Viewport Height: 160 Window Width Override: 1024 (4 times) Window Height Override: 640 (4 times) *Window Width Override and Window Height Override can be set after enabling Advanced Settings in the top right of the settings panel. Then I scrolled down a bit in the settings panel and set the stretch mode to viewport so that the game graphics scale to fit the window size. I left the aspect ratio as is.
Stretch: Mode: viewport Aspect: keep (default) Scale: 1 (default) Scale Mode: fractional (default) Importing Assets for Tiles I downloaded the 1-Bit Pack from KENNEY .</description>
    </item>
    <item>
      <title>🤖 Animation State Machine in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</link>
      <pubDate>Fri, 14 Oct 2022 20:25:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</guid>
      <description>This article describes an implementation of an animated state machine for a 2D game. A state machine controls the transition of an object from one state to another. There are several restrictions on state transitions, such as when an object can only transition from one state to a limited number of states, or when an object can only transition to the next state after the current animation ends. For example, &amp;ldquo;idle&amp;rdquo; and &amp;ldquo;run&amp;rdquo; can transition immediately in both directions, but &amp;ldquo;idle&amp;rdquo; to &amp;ldquo;attack&amp;rdquo; can transition immediately, but &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;run&amp;rdquo; cannot, and &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; can transition only after the &amp;ldquo;attack&amp;rdquo; animation ends. The &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; transition occurs only after the &amp;ldquo;attack&amp;rdquo; animation is over. If all of these controls were coded in script, the code would tend to be rather long and complex. On the other hand, Godot&amp;rsquo;s &amp;ldquo;AnimationTree&amp;rdquo; node can be used to reduce the amount of script code and improve readability. In this article, we will show you how to implement a state machine using the &amp;ldquo;AnimationTree&amp;rdquo; node. Environment Godot version: 3.5.1 Computer OS: macOS 12.6</description>
    </item>
    <item>
      <title>🤖 2D Hit Detection for Melee Attacks in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</link>
      <pubDate>Wed, 05 Oct 2022 02:55:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</guid>
      <description>This article introduces a method for implementing simple hit detection for melee attacks in 2D games. This is a commonly used method where the object to attack (e.g., player character) has a collision shape (called &amp;ldquo;Hit Box&amp;rdquo;) that is only active during the attack, and the object to be attacked (e.g., enemy character, destructible barrels, crates, grass, etc.) has a collision shape (called &amp;ldquo;Hurt Box). The hit judgment of the attack can be implemented by enabling/disabling the Hit Box and Hurt Box, and changing their size and position in accordance with the animation of the attack. This is relatively easy to implement, so let&amp;rsquo;s get started. Environment Godot version: 3.5.1 Computer OS version: macOS 11.6.5 Basic Articles You may also find the following articles useful. Downloading Godot Project Manager of Godot Add Actions to Input Map First, go to &amp;ldquo;Project&amp;rdquo; &amp;gt; &amp;ldquo;Project Settings&amp;rdquo; &amp;gt; &amp;ldquo;Input Map&amp;rdquo; tab and add the following actions: right: D key left: A key down: S key up: W key attack: Space bar Create a Player scene Create a scene for the player character. Create the</description>
    </item>
    <item>
      <title>🤖 2D Grid Based Path Finding in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0017_2d_grid_based_path_finding/</link>
      <pubDate>Thu, 22 Sep 2022 19:45:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0017_2d_grid_based_path_finding/</guid>
      <description>This article is a tutorial on how to implement grid-based path finding in 2D games using the AStar algorithm. For 2D pathfinding that is not grid-based, please refer to the article 2D Path Finding in Godot3 . I hope you will choose the article that best suits the game you want to make. The final project file in this tutorial is located in the GitHub repository . After downloading and extracting the .zip file, you can import the &amp;ldquo;project.godot&amp;rdquo; file into the Godot Engine to see the project directly. Translated with www.DeepL.com/Translator (free version) Environment Godot version: 3.5 Computer OS: macOS 11.6.5 Basic Articles You may also find the following articles useful. Downloading Godot Project Manager of Godot About AStar In this article, we will implement grid-based routing using a search algorithm called AStar. It is useful when you want to automatically move objects along a grid from the current location to the destination. For example, this method is ideal for puzzle games where you move pieces on the board, or strategy simulation games where you move characters of both</description>
    </item>
    <item>
      <title>🤖 2D Path Finding in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/</link>
      <pubDate>Tue, 16 Aug 2022 23:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/</guid>
      <description>This tutorial introduces Path Finding in 2D games. Path finding is a function that determines the shortest possible path from an object to its destination, for example, when moving an object to a certain destination. Up to Godot 3.4, the Navigation node was used to implement path finding. This was not particularly inconvenient, but the methodology for game development using it was limited and inapplicable in some areas. This time, I would like to introduce an implementation method using Navigation Server, which was added to Godot 3.5. This is a backport from Godot 4, which is currently under active development. This article is intended for users of Godot 3.5 or later. Users of Godot version 3.4 or earlier should take note. The final project file for this tutorial is available at GitHub repository . You can also check the project directly by downloading the .zip file and importing the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine. Environment Godot version: 3.5 Computer OS: macOS 11.6.5 Basic Articles You may also find the following articles useful. Downloading Godot Project</description>
    </item>
    <item>
      <title>🤖 2D Screen Shake in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0014_screen_shake/</link>
      <pubDate>Thu, 28 Jul 2022 14:10:56 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0014_screen_shake/</guid>
      <description>In this article, I will explain how to implement an effect, &amp;ldquo;screen shake&amp;rdquo;, in 2D games. It is not an absolutely necessary element of a game, but if used well, it can make the player&amp;rsquo;s game experience more interactive and directly affect the user experience. For example, there are many situations where it could be used, such as when a player fires a gun, takes damage from enemies, or falls from a high place. By the way, this kind of element that is not necessary but makes the game more interesting by adding it is called &amp;ldquo;game juice&amp;rdquo; in English. I have one more vocabulary in English, and I am a little wiser now. There are already many resources on the Web that explain how to implement screen shake, and of course there are methods other than those introduced here. This time, we refer to the following video and article in particular, so please check them as well for a deeper understanding. Reference YouTube: GDC - Math for Game Programmers: Juicing Your Cameras With Math KidsCanCode: SCREEN SHAKE The project</description>
    </item>
    <item>
      <title>🤖 Advanced Match 3 Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0013_advanced_match3/</link>
      <pubDate>Fri, 15 Jul 2022 18:40:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0013_advanced_match3/</guid>
      <description>In this tutorial, we will create an advanced match-3 puzzle game, a type of puzzle game in which one piece is moved freely on the board for a certain period of time to erase three or more pieces of the same color in a row.
This is easy to understand if you imagine a puzzle game like &amp;ldquo;Puzzle &amp;amp; Dragons&amp;rdquo; (a.k.a. &amp;ldquo;Puzzle Dora&amp;rdquo;), which has gained popularity as a mobile game.
However, the tutorial would be too large if it included all game elements such as decks, gacha, and battles with enemy characters, so we will focus on the puzzle part of the tutorial this time.
For more information on how to create an standard match-3 puzzle game like &amp;ldquo;Candy Crush&amp;rdquo; or a puzzle game like &amp;ldquo;LINE Tsum Tsum&amp;rdquo;, please refer to the following tutorial.
Other Tutorials If you want to make a game like &amp;ldquo;Candy Crush&amp;rdquo;:
Match 3 puzzle game in Godot If you want to make a game like &amp;ldquo;LINE: Disney Tsum Tsum&amp;rdquo;:
Connecting matching colors puzzle game in Godot The project file that will be created at the end of this tutorial is located in the GitHub repository .</description>
    </item>
    <item>
      <title>🤖 Match 3 Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0012_match3/</link>
      <pubDate>Sat, 02 Jul 2022 06:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0012_match3/</guid>
      <description>In this tutorial, we will create a match 3 puzzle game. Match 3 is a puzzle game in which players move multiple colorful pieces evenly arranged along a grid on the board to eliminate three or more pieces of the same color in a row. This genre is particularly popular among mobile game players because it is easy to operate and enjoyable. Candy Crush, Toon Blast, and Royal Match are just a few examples of popular games. Puzzle &amp;amp; Dragons and LINE Tsum Tsum are also based on Match 3, although the controls are slightly different. In this tutorial, we will create a puzzle like Candy Crush, in which the pieces are moved only one square at a time to match colors. If you want to make a game like &amp;ldquo;LINE tsum tsum&amp;rdquo;, check another tutorial, Connecting matching colors puzzle game in Godot . The final project file for this tutorial is located at GitHub repository . If you download the .zip file and import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine, you can check the</description>
    </item>
    <item>
      <title>🤖 Connecting Matching Colors Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/</link>
      <pubDate>Mon, 20 Jun 2022 03:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/</guid>
      <description>In this tutorial, we will explain how to create a type of game in which you trace and erase drops of the same color, like the very popular Disney Tsum Tsum smartphone game. LINE: Disney Tsum Tsum Note that the final project file in this tutorial is located in the GitHub repository . You can directly check the project by downloading the .zip file and importing the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine. Environment This tutorial was created in the following environment ・Godot version: 3.4.4 ・Computer OS version: macOS 11.6.5 Memo: Please also use the following articles to help you start creating your game. Downloading Godot Project Manager of Godot Creating a new project First, we would like you to start Godot Engine and create a new project. Let&amp;rsquo;s name the project &amp;ldquo;Connect Colors Start. Editing project settings Once the editor appears, let&amp;rsquo;s editing the settings for the entire project. First, set the display size for the game. In this case, we set</description>
    </item>
    <item>
      <title>🤖 2D Grid-based Movement in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</link>
      <pubDate>Wed, 08 Jun 2022 00:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</guid>
      <description>This tutorial explains how to implement &amp;ldquo;grid-based movement&amp;rdquo; in 2D games. Grid-based movement refers to the movement of objects such as characters on the game screen one grid at a time.
Many puzzle games such as the popular smartphone game &amp;ldquo;Puzzle &amp;amp; Dragons&amp;rdquo; and the original falling game &amp;ldquo;Tetris,&amp;rdquo; as well as tactical simulation games such as the &amp;ldquo;Fire Emblem&amp;rdquo; series and &amp;ldquo;Tactics Ogre&amp;rdquo; probably employ this type of movement.
On the other hand, RPGs such as the &amp;ldquo;Final Fantasy&amp;rdquo; series and the &amp;ldquo;Dragon Quest&amp;rdquo; series also use this grid-based movement when looking closely at character movement in the era of 2D graphics, when these games appeared as software for the NES and Super Nintendo.
Thus, grid-based movement is used in games of various genres, and its versatility is quite high.
In this article, we will focus as much as possible on only the implementation of grid-based movement. In addition, a sample game that uses grid-based movement will be introduced at the end of the article, so please feel free to refer to it as well.
Note that the project file that will be created at the end of this tutorial is located in the GitHub repository .</description>
    </item>
    <item>
      <title>🤖 Homing Missiles in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0008_homing_missiles/</link>
      <pubDate>Sat, 28 May 2022 18:41:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0008_homing_missiles/</guid>
      <description>In this tutorial, we will create a homing missile in a 2D top-down shooter. A homing missile is a missile that tracks its target. Environment This tutorial was created in the following environment ・Godot version: 3.4.2 ・Computer OS version: macOS 11.6.5 To focus on the creation of the homing missile, the rest of the project has been pre-created in advance. The project file for this tutorial is located at GitHub repository . After downloading the .zip file, import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;Start&amp;rdquo; folder into the Godot Engine, and you can start the project with only the preliminary work completed. If you would like to see the completed project in a hurry, import the &amp;ldquo;project.godot&amp;rdquo; file from the &amp;ldquo;End&amp;rdquo; folder. All the assets imported into the project were downloaded from KENNEY website. I used an asset pack called Tower Defense (top-down) . I just want to thank them for making such a great asset pack available to the public. Preliminary Preparation The following game specifications, except</description>
    </item>
    <item>
      <title>🤖 Bullet Hell in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0007_bullethell/</link>
      <pubDate>Mon, 23 May 2022 01:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0007_bullethell/</guid>
      <description>In this time, we will create a bullet hell aka barrage for a barrage shooting game. The bullet hell is a large number of bullets (or similar long-range attacks) like a curtain. A &amp;ldquo;bullet hell shooter&amp;rdquo; is a game in which the player shoots at and defeats enemy characters while dodging and weaving through the gaps between the bullets. Some games specialize in simply dodging the bullets. Many games are based on the motif of spaceships and fighter planes that fit the image (in this tutorial, a ground battle between a wizard and a monster though).
In this tutorial, we will focus only on creating a bullet hell. Also, while bullet hell come in various shapes and sizes, we will focus on rotating-type bullet hell.
Environment This tutorial was created in the following environment
・Godot version: 3.4.2
・Computer OS version: macOS 11.6.5
The project file for this tutorial is located at GitHub repository . After downloading the .zip file, import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;Start&amp;rdquo; folder into the Godot Engine, and you will be able to start with a project that has only been prepped.</description>
    </item>
    <item>
      <title>🤖 Four Types of Guns for Top-down Shooting in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0006_guns_of_topdown_shooter/</link>
      <pubDate>Sat, 07 May 2022 22:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0006_guns_of_topdown_shooter/</guid>
      <description>In this tutorial, we are going to make four types of guns that commonly appear in 2D top-down shooters. Specifically, they are as follows. Handgun Shotgun Machine gun Laser Gun Environment This tutorial was created in the following environment ・Godot version: 3.4.2 ・Computer OS version: macOS 11.6.5 Since this tutorial will focus on gun creation, the following has been prepared in advance. 1. Game world A scene called &amp;ldquo;World.tscn&amp;rdquo; was prepared, and the appearance was simply created by adding a &amp;ldquo;TileMap&amp;rdquo; node. In addition to the &amp;ldquo;TileMap&amp;rdquo; node, a &amp;ldquo;Player&amp;rdquo; node and several &amp;ldquo;Obstacle&amp;rdquo; nodes were added. For these, we created individual scenes and added the instances. 2. Player Character Created as &amp;ldquo;Player.tscn&amp;rdquo; scene. The root node is the &amp;ldquo;KinematicBody2D&amp;rdquo; class, and the &amp;ldquo;Sprite&amp;rdquo; and the &amp;ldquo;CollisionShape2D&amp;rdquo; were added as child nodes. The texture of the &amp;ldquo;Sprite&amp;rdquo; node is a hitman with a gun. A node named &amp;ldquo;Muzzle&amp;rdquo; of the &amp;ldquo;Position2D&amp;rdquo; class was placed at the tip of the image of the gun held by the hitman.</description>
    </item>
  </channel>
</rss>
