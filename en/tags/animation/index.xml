<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Animation on Peanuts Code</title>
    <link>https://www.peanuts-code.com/en/tags/animation/</link>
    <description>Recent content in Animation on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.134.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 14 Oct 2022 20:25:00 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/en/tags/animation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ðŸ¤– Animation State Machine in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</link>
      <pubDate>Fri, 14 Oct 2022 20:25:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</guid>
      <description>&lt;p&gt;This article describes an implementation of an animated state machine for a 2D game. A state machine controls the transition of an object from one state to another.&lt;/p&gt;
&lt;p&gt;There are several restrictions on state transitions, such as when an object can only transition from one state to a limited number of states, or when an object can only transition to the next state after the current animation ends. For example, &amp;ldquo;idle&amp;rdquo; and &amp;ldquo;run&amp;rdquo; can transition immediately in both directions, but &amp;ldquo;idle&amp;rdquo; to &amp;ldquo;attack&amp;rdquo; can transition immediately, but &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;run&amp;rdquo; cannot, and &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; can transition only after the &amp;ldquo;attack&amp;rdquo; animation ends. The &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; transition occurs only after the &amp;ldquo;attack&amp;rdquo; animation is over.&lt;/p&gt;
&lt;p&gt;If all of these controls were coded in script, the code would tend to be rather long and complex. On the other hand, Godot&amp;rsquo;s &amp;ldquo;AnimationTree&amp;rdquo; node can be used to reduce the amount of script code and improve readability. In this article, we will show you how to implement a state machine using the &amp;ldquo;AnimationTree&amp;rdquo; node.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 12.6&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ðŸ¤– 2D Hit Detection for Melee Attacks in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</link>
      <pubDate>Wed, 05 Oct 2022 02:55:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</guid>
      <description>&lt;p&gt;This article introduces a method for implementing simple hit detection for melee attacks in 2D games.&lt;/p&gt;
&lt;p&gt;This is a commonly used method where the object to attack (e.g., player character) has a collision shape (called &amp;ldquo;Hit Box&amp;rdquo;) that is only active during the attack, and the object to be attacked (e.g., enemy character, destructible barrels, crates, grass, etc.) has a collision shape (called &amp;ldquo;Hurt Box). The hit judgment of the attack can be implemented by enabling/disabling the Hit Box and Hurt Box, and changing their size and position in accordance with the animation of the attack.&lt;/p&gt;
&lt;p&gt;This is relatively easy to implement, so let&amp;rsquo;s get started.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;add-actions-to-input-map&#34;&gt;Add Actions to Input Map&lt;/h2&gt;
&lt;p&gt;First, go to &amp;ldquo;Project&amp;rdquo; &amp;gt; &amp;ldquo;Project Settings&amp;rdquo; &amp;gt; &amp;ldquo;Input Map&amp;rdquo; tab and add the following actions:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
