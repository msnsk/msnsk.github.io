<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GameDev on Peanuts Code</title>
    <link>https://www.peanuts-code.com/en/tags/gamedev/</link>
    <description>Recent content in GameDev on Peanuts Code</description>
    <image>
      <title>Peanuts Code</title>
      <url>https://www.peanuts-code.com/images/logomark.png</url>
      <link>https://www.peanuts-code.com/images/logomark.png</link>
    </image>
    <generator>Hugo -- 0.134.1</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Sep 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://www.peanuts-code.com/en/tags/gamedev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>üïπÔ∏è Lovely Solitaire</title>
      <link>https://www.peanuts-code.com/en/portfolio/work0002_lovely_solitaire/</link>
      <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://www.peanuts-code.com/en/portfolio/work0002_lovely_solitaire/</guid>
      <description>&lt;h2 id=&#34;introducing-a-mobile-game-lovely-solitaire&#34;&gt;Introducing a Mobile Game, Lovely Solitaire!&lt;/h2&gt;
&lt;p&gt;When it comes to solitaire (Klondike), it&amp;rsquo;s the king of classic one-player card games, and now, introducing the mobile game &amp;ldquo;Lovely Solitaire&amp;rdquo; available on the App Store! With its chic user interface, you can exude a sense of style even while playing on the train! (Or so we hope?) New to the game? Don&amp;rsquo;t worry, you can learn the rules and tips from the &amp;ldquo;How to Play&amp;rdquo; section in the game!&lt;/p&gt;

&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;

    
    &lt;video controls autoplay loop muted playsinline aria-label=&#39;Lovely Solitaire Preview&#39; style=&#39;width: 40%&#39;&gt;
    
        &lt;source src=&#34;https://www.peanuts-code.com/images/portfolio/lovely_solitaire/en/pv/pv_en_1.mp4&#34; type=&#34;video/mp4&#34;&gt;
        
        Your browser does not support the video tag.
    &lt;/video&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;h2 id=&#34;what-makes-it-lovely&#34;&gt;What Makes It Lovely?&lt;/h2&gt;
&lt;p&gt;The pastel-colored UI and pixel art card designs make it lovely! The trailing effect when dragging cards is cool!&lt;/p&gt;
&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/portfolio/lovely_solitaire/en/ss/ss_en_1.png#center&#34;
         alt=&#34;Lovely Solitaire shot1&#34; width=&#34;40%&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Plus, the music is incredibly cool, the sound effects when moving cards are satisfying, making it lovely! So, be sure to turn on the sound while playing!&lt;/p&gt;</description>
    </item>
    <item>
      <title>üïπÔ∏è Mobile Game - Quick Hand Poker</title>
      <link>https://www.peanuts-code.com/en/portfolio/work0003_quick_hand_poker/</link>
      <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://www.peanuts-code.com/en/portfolio/work0003_quick_hand_poker/</guid>
      <description>&lt;h2 id=&#34;this-is-poker-turned-into-a-falling-object-game&#34;&gt;This is poker turned into a falling object game!&lt;/h2&gt;
&lt;p&gt;Poker, a table game loved by many in casinos, has been reborn as a falling object game! It&amp;rsquo;s called &amp;ldquo;Quick Hand Poker&amp;rdquo;! Quickly touch five objects on the screen that combine the suit and rank of playing cards to form poker hands! Aim for a high score within the time limit! Even if it&amp;rsquo;s your first time playing, don&amp;rsquo;t worry. The rules and hands of the game can be easily checked within the game!&lt;/p&gt;

&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;

    
    &lt;video controls autoplay loop muted playsinline aria-label=&#39;Quick Hand Poker Preview&#39; style=&#39;width: 40%&#39;&gt;
    
        &lt;source src=&#34;https://www.peanuts-code.com/images/portfolio/quick_hand_poker/en/pv/pv_en_1.mp4&#34; type=&#34;video/mp4&#34;&gt;
        
        Your browser does not support the video tag.
    &lt;/video&gt;
&lt;/div&gt;
&lt;br/&gt;
&lt;h2 id=&#34;what-kind-of-game-is-quick-hand-poker&#34;&gt;What kind of game is Quick Hand Poker?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy operation!&lt;br&gt;
The operation is basically as simple as touching the screen! Select five objects from the falling card objects that form a poker hand! The selected five objects disappear, and new objects fall. Thus, you keep touching the objects on the screen one after another! This is almost all the operation!&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;align-center &#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/portfolio/quick_hand_poker/en/ss/ss_en_1.png#center&#34;
         alt=&#34;Quick Hand Poker Shot 1&#34; width=&#34;40%&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simple rules!&lt;br&gt;
The simple rule is to aim for a high score within the time limit (initially 30 seconds). Quickly form as rare poker hands as possible! The total of the ranks (numbers) of the selected five objects is multiplied by the multiplier corresponding to the hand, which is added as the score. In other words, the rarer the hand, the higher the score. Moreover, the rarer the hand, the longer the bonus time added to the time limit, allowing you to play the game longer and aim for even higher scores!&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Devlog: Slashing Samurai - Planning</title>
      <link>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_1/</link>
      <pubDate>Sun, 24 Dec 2023 02:21:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_1/</guid>
      <description>&lt;p&gt;This article is a record of the &amp;ldquo;Planning&amp;rdquo; phase of the (post-release) devlog of the iOS mobile game &amp;ldquo;Slashing Samurai,&amp;rdquo; released on the App Store on December 15, 2023.&lt;/p&gt;
&lt;p&gt;Slashing Samurai is available for free download on the App Store. Just click the banner below to get this game!&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://apps.apple.com/en/app/slashing-samurai/id6473121142&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/banners/app_store/Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg&#34; width=&#34;200px&#34;/&gt; &lt;/a&gt;
&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;defining-the-rough-specifications-of-the-game&#34;&gt;Defining the Rough Specifications of the Game&lt;/h2&gt;
&lt;p&gt;The development process began by roughly defining the specifications of the game to be developed.&lt;/p&gt;
&lt;p&gt;It was pre-determined that the game would be distributed globally on a specific platform. If aiming for global distribution, it was clear that it would require a certain level of quality to gain approval. Achieving this alone meant the game&amp;rsquo;s volume had to be kept small. For a game with a small volume, a casual game seemed appropriate. The essential element for casual games is user-friendliness. The most effective platform for maximizing user-friendliness is likely a mobile game. With devices that everyone carries, offering a small screen that serves as an input device, there seems to be no other platform that matches the physical convenience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ 2D Grid-Based Movement</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0010_2d_grid_based_movement/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial, we are going to implement a &amp;ldquo;grid-based movement&amp;rdquo; system for a 2D game in Godot. It&amp;rsquo;s not overly complex.&lt;/p&gt;
&lt;p&gt;Some of you might be wondering, what exactly is grid-based movement? Grid-based movement is when objects, such as characters, move one grid (one tile) at a time on a game screen that is divided into evenly spaced grid lines.&lt;/p&gt;
&lt;p&gt;To give some examples, think of older games like the &lt;em&gt;Fire Emblem&lt;/em&gt; series, &lt;em&gt;Tactics Ogre&lt;/em&gt;, or various simulation games. Even RPGs like &lt;em&gt;Final Fantasy&lt;/em&gt; and &lt;em&gt;Dragon Quest&lt;/em&gt; during their 2D eras employed grid-based movement when it came to character movement on maps. Puzzle games like &lt;em&gt;Tetris&lt;/em&gt; often use grid-based movement for the blocks or pieces as well.&lt;/p&gt;
&lt;p&gt;As you can see, grid-based movement is widely used across many genres of games, making it a highly versatile feature.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created under the following environment:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Godot version: &lt;strong&gt;4.3&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Computer OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the way, the project I made can be found in this &lt;a href=&#34;https://github.com/msnsk/GridBasedMovement.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Making a Tilemap with TileMapLayer</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</link>
      <pubDate>Fri, 23 Aug 2024 13:55:22 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0024_tilemaplayer/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;With Godot 4.3, the previously used TileMap class has been deprecated (meaning it won&amp;rsquo;t be updated anymore), and a new TileMapLayer class has been added in its place. So, I&amp;rsquo;m going to actually create a tilemap using TileMapLayer!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;My environment at the time of writing&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot version: &lt;strong&gt;4.3&lt;/strong&gt;&lt;br&gt;
Computer model: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.6.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;h2 id=&#34;setting-the-screen-size&#34;&gt;Setting the Screen Size&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll be using 16x16 px tile images this time, so I&amp;rsquo;ll make the Viewport small enough to fit the tiles neatly. After creating a new project, I went to Project Settings &amp;gt; General tab &amp;gt; Window and set the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Size:
&lt;ul&gt;
&lt;li&gt;Viewport Width: 256&lt;/li&gt;
&lt;li&gt;Viewport Height: 160&lt;/li&gt;
&lt;li&gt;Window Width Override: 1024 (4 times)&lt;/li&gt;
&lt;li&gt;Window Height Override: 640 (4 times)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;span style=&#34;font-size: 0.75em; font-weight: 600; color: #7a7a7a; margin-bottom: 1em; display: inline-block;&#34;&gt;*Window Width Override and Window Height Override can be set after enabling Advanced Settings in the top right of the settings panel.&lt;/span&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0024/01a.png&#34;
         alt=&#34;Screen size settings&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Then I scrolled down a bit in the settings panel and set the stretch mode to &lt;strong&gt;viewport&lt;/strong&gt; so that the game graphics scale to fit the window size. I left the aspect ratio as is.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Distributing Games from Xcode to App Store Connect</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0023_distribute_app_from_xcode/</link>
      <pubDate>Mon, 13 May 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0023_distribute_app_from_xcode/</guid>
      <description>&lt;p&gt;In this article, I&amp;rsquo;ll explain how to upload an iOS game exported from Godot to App Store Connect using Xcode. It&amp;rsquo;ll probably be short, so feel free to take it easy. Also, I&amp;rsquo;m assuming you&amp;rsquo;re familiar with Xcode, which is a macOS-exclusive app, so I&amp;rsquo;ll proceed with that in mind. Macs can be pricey, but if you want to release apps like iOS or macOS on the App Store, it&amp;rsquo;s an essential tool. I got mine with a 2-year Orico loan. It was tough, though üòÜ&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment at the time of writing this article&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Xcode Version: &lt;strong&gt;15.3 (15E204a)&lt;/strong&gt;&lt;br&gt;
Computer Model: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.4.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;
&lt;h2 id=&#34;working-with-xcode&#34;&gt;Working with Xcode&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s open the project for the iOS version of your game exported from Godot in Xcode. If you peek into the folder where you exported it via Finder, you&amp;rsquo;ll find a file with a &lt;strong&gt;.xcodeproj&lt;/strong&gt; extension. Just double-click on that (if there&amp;rsquo;s a &lt;strong&gt;.xcworkspace&lt;/strong&gt; file generated due to adding plugins like Google AdMob, open that instead, but I won&amp;rsquo;t dive into that here).&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Implementing Game Center Features After Adding Its Plugin</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0022_implement_game_center/</link>
      <pubDate>Sat, 11 May 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0022_implement_game_center/</guid>
      <description>&lt;p&gt;In the previous article &lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0021_game_center_plugin/&#34;&gt;ü§ñ Adding Game Center Plugin to Your Project&lt;/a&gt;
, I explained how to add the Game Center plugin from the official Godot iOS plugins to your project. In this article, I&amp;rsquo;ll guide you on implementing the functionalities of Apple&amp;rsquo;s Game Center using the added plugin.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re wondering what Game Center is all about, I briefly explained it in the beginning of the previous article, so you might want to check that out first.&lt;/p&gt;
&lt;p&gt;Broadly, I&amp;rsquo;ll explain in two main sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setting Up Game Center in App Store Connect&lt;/li&gt;
&lt;li&gt;Implementing Game Center in GDScript&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the way, the basic usage of plugins is documented in &lt;a href=&#34;https://docs.godotengine.org/en/4.x/tutorials/platform/ios/plugins_for_ios.html&#34; target=&#34;_blank&#34;&gt;Godot Docs / iOS plugins / iOS plugins&lt;/a&gt;
, so it would be reasonable to start there.&lt;/p&gt;
&lt;p&gt;Also, you can find the code for the Game Center plugin on GitHub at &lt;a href=&#34;https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/gamecenter/game_center.mm&#34; target=&#34;_blank&#34;&gt;Godot iOS GameCenter plugin&lt;/a&gt;
. If you want to delve into the details, you can check it out. Personally, I found it a bit challenging at first.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment at the Time of Writing&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot Version: &lt;strong&gt;4.2.1&lt;/strong&gt;&lt;br&gt;
Computer Model: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.4.1&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Adding a Game Center Plugin to Your Project</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0021_game_center_plugin/</link>
      <pubDate>Sun, 05 May 2024 20:17:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0021_game_center_plugin/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this article, I&amp;rsquo;ll show you how to add the official Godot plugin for integrating with Apple&amp;rsquo;s Game Center to your project.&lt;/p&gt;
&lt;p&gt;First off, what is Game Center? For those unfamiliar, it‚Äôs a feature available on iOS devices like iPhones and iPads. By signing in with an Apple ID, Game Center records achievements and allows players to compete on leaderboards in supported games. Developers can set achievements, define their completion criteria, and decide what to compete for on the leaderboards.&lt;/p&gt;
&lt;p&gt;Using the Game Center plugin in Godot, you can easily integrate these features into your games, which is pretty awesome.&lt;/p&gt;
&lt;p&gt;By the way, you can find the official documentation and source code at the &lt;a href=&#34;https://github.com/godotengine/godot-ios-plugins&#34; target=&#34;_blank&#34;&gt;Godot iOS plugins repository&lt;/a&gt;
, so take a look there first. If there&amp;rsquo;s anything you don&amp;rsquo;t quite understand, you can always come back to this article.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Author&amp;#39;s Environment at the Time of Writing&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Godot Version: &lt;strong&gt;4.2.1&lt;/strong&gt;&lt;br&gt;
Computer Model: &lt;strong&gt;MacBook Air M1, 2020&lt;/strong&gt;&lt;br&gt;
OS: &lt;strong&gt;macOS 14.4.1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Devlog: Slashing Samurai - Reflection</title>
      <link>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_4/</link>
      <pubDate>Thu, 11 Jan 2024 00:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_4/</guid>
      <description>&lt;p&gt;This article is a record of reflections on the (post-release) development log of the iOS mobile game &amp;ldquo;Slashing Samurai,&amp;rdquo; released on the App Store on December 15, 2023. It explores areas for improvement and lessons learned during the development process.&lt;/p&gt;
&lt;p&gt;Feel free to download &amp;ldquo;Slashing Samurai&amp;rdquo; for free from the App Store using the banner below if you&amp;rsquo;re interested.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://apps.apple.com/jp/app/slashing-samurai/id6473121142&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/banners/app_store/Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg&#34; width=&#34;200px&#34;/&gt; &lt;/a&gt;
&lt;/figure&gt;

&lt;br/&gt;
&lt;h2 id=&#34;identification-of-reflection-points&#34;&gt;Identification of Reflection Points&lt;/h2&gt;
&lt;p&gt;After completing the development of &amp;ldquo;Slashing Samurai&amp;rdquo; and reflecting on the process and outcomes, various points for improvement became apparent. To better utilize these reflections in future game development, I want to document them thoroughly.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by summarizing specific points for improvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overdoing
&lt;ul&gt;
&lt;li&gt;Too many stages&lt;/li&gt;
&lt;li&gt;Excessive difficulty&lt;/li&gt;
&lt;li&gt;Overemphasis on world-building&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Too late
&lt;ul&gt;
&lt;li&gt;Implementation of plugins took too long&lt;/li&gt;
&lt;li&gt;Testing on actual devices was too slow&lt;/li&gt;
&lt;li&gt;Promotion preparation was too slow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will provide detailed records for each of these.&lt;/p&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Devlog: Slashing Samurai - Logic</title>
      <link>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_3/</link>
      <pubDate>Sun, 31 Dec 2023 04:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_3/</guid>
      <description>&lt;p&gt;This article is a record of the &amp;ldquo;logic&amp;rdquo; behind the development of &amp;ldquo;Slashing Samurai,&amp;rdquo; a mobile game for iOS released on the App Store on December 15, 2023, using the Godot Engine. However, to avoid excessive length, specific code details will be kept to a minimum.&lt;/p&gt;
&lt;p&gt;Slashing Samurai is available for free download on the App Store. Just click the banner below to get this game!&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://apps.apple.com/en/app/slashing-samurai/id6473121142&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/banners/app_store/Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg&#34; width=&#34;200px&#34;/&gt; &lt;/a&gt;
&lt;/figure&gt;

&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&#34;identifying-necessary-screens&#34;&gt;Identifying Necessary Screens&lt;/h2&gt;
&lt;p&gt;I am the type to prioritize visuals. In game development, including the creation of &amp;ldquo;Slashing Samurai&amp;rdquo; in Godot, I started by identifying the necessary screens. I also considered the flow of screen transitions. Although there were many changes in the end, the base stayed relatively close to the initial plan.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/posts/post0005/3_logic/01.webp&#34; alt=&#34;Note: Screen Transitions&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;Initially, the plan included the following screens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start Screen&lt;/li&gt;
&lt;li&gt;Play Screen (including Pause Screen)&lt;/li&gt;
&lt;li&gt;Stage Selection Screen&lt;/li&gt;
&lt;li&gt;Settings Screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, the following screens were added:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prologue Screen&lt;/li&gt;
&lt;li&gt;Menu Screen
&lt;ul&gt;
&lt;li&gt;Credit Screen&lt;/li&gt;
&lt;li&gt;Score Screen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Falling Object Record Screen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This devlog will focus on documenting the screens that were originally planned to be the core of the game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Devlog: Slashing Samurai - Assets</title>
      <link>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_2/</link>
      <pubDate>Wed, 27 Dec 2023 12:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0005_slashing_samurai_devlog_2/</guid>
      <description>&lt;p&gt;This article is a record of the &amp;ldquo;Assets&amp;rdquo; in the (post) devlog of the iOS mobile game &amp;ldquo;Slashing Samurai,&amp;rdquo; released on the App Store on December 15, 2023.&lt;/p&gt;
&lt;p&gt;Slashing Samurai is available for free download on the App Store. Just click the banner below to get this game!&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://apps.apple.com/en/app/slashing-samurai/id6473121142&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/banners/app_store/Download_on_the_App_Store_Badge_US-UK_RGB_blk_092917.svg&#34; width=&#34;200px&#34;/&gt; &lt;/a&gt;
&lt;/figure&gt;

&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&#34;consideration-of-assets-to-use&#34;&gt;Consideration of Assets to Use&lt;/h2&gt;
&lt;p&gt;In this development log, we record how we prepared assets for the development of the mobile game &amp;ldquo;Slashing Samurai.&amp;rdquo; In the context of game development, assets refer to the materials used.&lt;/p&gt;
&lt;p&gt;First, we listed the necessary assets and proceeded with a rough policy to prepare them with as low a budget as possible, considering the time cost.&lt;/p&gt;
&lt;p&gt;The result of listing the assets necessary for the game is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Character images&lt;/li&gt;
&lt;li&gt;Object (falling items) images&lt;/li&gt;
&lt;li&gt;Background images&lt;/li&gt;
&lt;li&gt;Fonts&lt;/li&gt;
&lt;li&gt;Background music (BGM)&lt;/li&gt;
&lt;li&gt;Sound effects (SFX)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will detail how we prepared each of these materials one by one.&lt;/p&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Switching Sound Resources by Script in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0020_switching_sound_resources/</link>
      <pubDate>Wed, 19 Oct 2022 19:45:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0020_switching_sound_resources/</guid>
      <description>&lt;p&gt;This article explains how to switch between and play multiple sound resources (music and sound effect files) with a single &amp;ldquo;AudioStreamPlayer&amp;rdquo; node.&lt;/p&gt;
&lt;p&gt;Basically, only one sound resource can be set per &amp;ldquo;AudioStreamPlayer&amp;rdquo; node. In other words, you must add &amp;ldquo;AudioStreamPlayer&amp;rdquo; nodes in the scene tree for each sound resource. You may feel useless in a situation where there are multiple nodes in the scene tree with the same settings except for the sound resource (as shown in the screenshot below), and you may also feel a little uncomfortable with the lack of visibility in the scene dock.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0020_switching_sound_resources/img0.png&#34; alt=&#34;project settings - window size&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;So, if you have multiple sound resources that are never played simultaneously (e.g., multiple sound effects for different types of character attacks, multiple sound effects for different types of buttons on the UI, etc.), add only the minimum necessary &amp;ldquo;AudioStreamPlayer&amp;rdquo; node for each use to your scene. If you code a program that switches sound resources according to the situation, there will be no waste and the scene dock will look cleaner.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Animation State Machine in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</link>
      <pubDate>Fri, 14 Oct 2022 20:25:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0019_2d_animation_state_machine/</guid>
      <description>&lt;p&gt;This article describes an implementation of an animated state machine for a 2D game. A state machine controls the transition of an object from one state to another.&lt;/p&gt;
&lt;p&gt;There are several restrictions on state transitions, such as when an object can only transition from one state to a limited number of states, or when an object can only transition to the next state after the current animation ends. For example, &amp;ldquo;idle&amp;rdquo; and &amp;ldquo;run&amp;rdquo; can transition immediately in both directions, but &amp;ldquo;idle&amp;rdquo; to &amp;ldquo;attack&amp;rdquo; can transition immediately, but &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;run&amp;rdquo; cannot, and &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; can transition only after the &amp;ldquo;attack&amp;rdquo; animation ends. The &amp;ldquo;attack&amp;rdquo; to &amp;ldquo;idle&amp;rdquo; transition occurs only after the &amp;ldquo;attack&amp;rdquo; animation is over.&lt;/p&gt;
&lt;p&gt;If all of these controls were coded in script, the code would tend to be rather long and complex. On the other hand, Godot&amp;rsquo;s &amp;ldquo;AnimationTree&amp;rdquo; node can be used to reduce the amount of script code and improve readability. In this article, we will show you how to implement a state machine using the &amp;ldquo;AnimationTree&amp;rdquo; node.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 12.6&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ 2D Hit Detection for Melee Attacks in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</link>
      <pubDate>Wed, 05 Oct 2022 02:55:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0018_melee_attacks/</guid>
      <description>&lt;p&gt;This article introduces a method for implementing simple hit detection for melee attacks in 2D games.&lt;/p&gt;
&lt;p&gt;This is a commonly used method where the object to attack (e.g., player character) has a collision shape (called &amp;ldquo;Hit Box&amp;rdquo;) that is only active during the attack, and the object to be attacked (e.g., enemy character, destructible barrels, crates, grass, etc.) has a collision shape (called &amp;ldquo;Hurt Box). The hit judgment of the attack can be implemented by enabling/disabling the Hit Box and Hurt Box, and changing their size and position in accordance with the animation of the attack.&lt;/p&gt;
&lt;p&gt;This is relatively easy to implement, so let&amp;rsquo;s get started.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5.1&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;add-actions-to-input-map&#34;&gt;Add Actions to Input Map&lt;/h2&gt;
&lt;p&gt;First, go to &amp;ldquo;Project&amp;rdquo; &amp;gt; &amp;ldquo;Project Settings&amp;rdquo; &amp;gt; &amp;ldquo;Input Map&amp;rdquo; tab and add the following actions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ 2D Grid Based Path Finding in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0017_2d_grid_based_path_finding/</link>
      <pubDate>Thu, 22 Sep 2022 19:45:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0017_2d_grid_based_path_finding/</guid>
      <description>&lt;p&gt;This article is a tutorial on how to implement grid-based path finding in 2D games using the AStar algorithm. For 2D pathfinding that is not grid-based, please refer to the article &lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/&#34; title=&#34;2D Path Finding in Godot3&#34;&gt;2D Path Finding in Godot3&lt;/a&gt;
. I hope you will choose the article that best suits the game you want to make.&lt;/p&gt;
&lt;p&gt;The final project file in this tutorial is located in the &lt;a href=&#34;https://github.com/msnsk/2DGridBasedPathFInding.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. After downloading and extracting the .zip file, you can import the &amp;ldquo;project.godot&amp;rdquo; file into the Godot Engine to see the project directly.&lt;/p&gt;
&lt;p&gt;Translated with &lt;a href=&#34;https://www.DeepL.com/Translator&#34; target=&#34;_blank&#34;&gt;www.DeepL.com/Translator&lt;/a&gt;
 (free version)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;about-astar&#34;&gt;About AStar&lt;/h2&gt;
&lt;p&gt;In this article, we will implement grid-based routing using a search algorithm called AStar. It is useful when you want to automatically move objects along a grid from the current location to the destination. For example, this method is ideal for puzzle games where you move pieces on the board, or strategy simulation games where you move characters of both sides on the board to fight each other.&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Grow with game jams</title>
      <link>https://www.peanuts-code.com/en/posts/post0004_my_first_game_jam/</link>
      <pubDate>Sun, 04 Sep 2022 00:35:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0004_my_first_game_jam/</guid>
      <description>&lt;p&gt;I recently joined the &amp;ldquo;KENNEY Game Jam&amp;rdquo; held recently. It was my first game jam. In this article, I would like to write about the game jam for indie game developers held on the &lt;a href=&#34;https://itch.io/jams&#34; target=&#34;_blank&#34;&gt;itch.io&lt;/a&gt;
 website, including what I learned and felt while participating in the game jam.&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;what-is-a-game-jam&#34;&gt;What is a Game Jam?&lt;/h2&gt;
&lt;p&gt;A game jam is an event where participants develop a game in a short period of time, publish it, and evaluate each other. It is also called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hackathon&#34; target=&#34;_blank&#34;&gt;hackathon&lt;/a&gt;
 of game development.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://itch.io/jams&#34; target=&#34;_blank&#34;&gt;itch.io&lt;/a&gt;
 site sells games, assets, and hosts a number of game jams worldwide. Some are held monthly, some are held as an annual event, and there are a variety of small and large game jams, and there is always some sort of game jam going on throughout the year. &lt;a href=&#34;https://itch.io/jam/kenney-jam-2022&#34; target=&#34;_blank&#34;&gt;KENNEY Jam 2022&lt;/a&gt;
, which I attended, was also held at &lt;a href=&#34;https://itch.io/jams&#34; target=&#34;_blank&#34;&gt;itch.io&lt;/a&gt;
.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/posts/post0004/img2.png&#34; alt=&#34;image2&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ 2D Path Finding in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/</link>
      <pubDate>Tue, 16 Aug 2022 23:10:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0016_2d_path_finding/</guid>
      <description>&lt;p&gt;This tutorial introduces Path Finding in 2D games. Path finding is a function that determines the shortest possible path from an object to its destination, for example, when moving an object to a certain destination.&lt;/p&gt;
&lt;p&gt;Up to Godot 3.4, the &lt;strong&gt;Navigation&lt;/strong&gt; node was used to implement path finding. This was not particularly inconvenient, but the methodology for game development using it was limited and inapplicable in some areas. This time, I would like to introduce an implementation method using &lt;strong&gt;Navigation Server&lt;/strong&gt;, which was added to Godot 3.5. This is a backport from Godot 4, which is currently under active development. This article is intended for users of Godot 3.5 or later. Users of Godot version 3.4 or earlier should take note.&lt;/p&gt;
&lt;p&gt;The final project file for this tutorial is available at &lt;a href=&#34;https://github.com/msnsk/2DPathFinding.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. You can also check the project directly by downloading the .zip file and importing the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Godot version: &lt;strong&gt;3.5&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Computer OS: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Basic Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;You may also find the following articles useful.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Circular Progress Bar in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0015_circular_progress_bar/</link>
      <pubDate>Fri, 05 Aug 2022 11:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0015_circular_progress_bar/</guid>
      <description>&lt;p&gt;In this article, I will show you how to create a circular progress bar. By using a circular progress bar instead of the usual portrait or landscape orientation, you can add a little accent to your screen, so please refer to this tutorial if you find a use for it. At the end of the tutorial, we will also show you some sample progress bars that are not circular (e.g., heart-shaped), so if you are interested, please take a look at them as well.&lt;/p&gt;
&lt;p&gt;The final project file for this tutorial is available at &lt;a href=&#34;https://github.com/msnsk/CircularProgressBar.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. If you download the .zip file and import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine, you can check the project directly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
„Éª&lt;em&gt;Godot version: &lt;strong&gt;3.4.4&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Other Articles&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Please also use the following articles to help you start creating your game.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ 2D Screen Shake in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0014_screen_shake/</link>
      <pubDate>Thu, 28 Jul 2022 14:10:56 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0014_screen_shake/</guid>
      <description>&lt;p&gt;In this article, I will explain how to implement an effect, &amp;ldquo;screen shake&amp;rdquo;, in 2D games. It is not an absolutely necessary element of a game, but if used well, it can make the player&amp;rsquo;s game experience more interactive and directly affect the user experience. For example, there are many situations where it could be used, such as when a player fires a gun, takes damage from enemies, or falls from a high place.&lt;/p&gt;
&lt;p&gt;By the way, this kind of element that is not necessary but makes the game more interesting by adding it is called &amp;ldquo;game juice&amp;rdquo; in English. I have one more vocabulary in English, and I am a little wiser now.&lt;/p&gt;
&lt;p&gt;There are already many resources on the Web that explain how to implement screen shake, and of course there are methods other than those introduced here. This time, we refer to the following video and article in particular, so please check them as well for a deeper understanding.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Reference&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://youtu.be/tu-Qe66AvtY&#34; target=&#34;_blank&#34;&gt;YouTube: GDC - Math for Game Programmers: Juicing Your Cameras With Math&lt;/a&gt;
&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href=&#34;https://kidscancode.org/godot_recipes/2d/screen_shake/&#34; target=&#34;_blank&#34;&gt;KidsCanCode: SCREEN SHAKE&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Advanced Match 3 Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0013_advanced_match3/</link>
      <pubDate>Fri, 15 Jul 2022 18:40:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0013_advanced_match3/</guid>
      <description>&lt;p&gt;In this tutorial, we will create an advanced match-3 puzzle game, a type of puzzle game in which one piece is moved freely on the board for a certain period of time to erase three or more pieces of the same color in a row.&lt;/p&gt;
&lt;p&gt;This is easy to understand if you imagine a puzzle game like &amp;ldquo;Puzzle &amp;amp; Dragons&amp;rdquo; (a.k.a. &amp;ldquo;Puzzle Dora&amp;rdquo;), which has gained popularity as a mobile game.&lt;/p&gt;
&lt;p&gt;However, the tutorial would be too large if it included all game elements such as decks, gacha, and battles with enemy characters, so we will focus on the puzzle part of the tutorial this time.&lt;/p&gt;
&lt;p&gt;For more information on how to create an standard match-3 puzzle game like &amp;ldquo;Candy Crush&amp;rdquo; or a puzzle game like &amp;ldquo;LINE Tsum Tsum&amp;rdquo;, please refer to the following tutorial.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Other Tutorials&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
If you want to make a game like &amp;ldquo;Candy Crush&amp;rdquo;:&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0012_match3/&#34; title=&#34;Match 3 puzzle game in Godot&#34;&gt;Match 3 puzzle game in Godot&lt;/a&gt;
&lt;br&gt;
If you want to make a game like &amp;ldquo;LINE: Disney Tsum Tsum&amp;rdquo;:&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/&#34; title=&#34;Connecting matching colors puzzle game in Godot&#34;&gt;Connecting matching colors puzzle game in Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî How to avoid frustration of game development</title>
      <link>https://www.peanuts-code.com/en/posts/post0003_how_to_avoid_frustration/</link>
      <pubDate>Mon, 04 Jul 2022 08:45:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0003_how_to_avoid_frustration/</guid>
      <description>&lt;p&gt;When one has taken the trouble to start a personal game development project, one would like to continue it for a long and enjoyable time if possible. However, in general, game development tends to be frustrating. Let us first consider the reasons for this.&lt;br&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;br/&gt;
&lt;h2 id=&#34;reasons-for-frustration&#34;&gt;Reasons for frustration&lt;/h2&gt;
&lt;p&gt;First, game development is hard work. It is sometimes referred to as a comprehensive art form. In other words, a game is a work of art that combines music, images, characters, scenarios, systems, level design, and everything else into one. There is no way it is easy. It is so difficult that it is easy to fall behind in the process.&lt;/p&gt;
&lt;p&gt;However, there is another problem that is even bigger, especially for adults who are making games as independent developers. That is the fact that you can&amp;rsquo;t make money by developing games. If there is no money to be made, they quit this hard work. Game development is hard work, but it pays off when the game sells.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Match 3 Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0012_match3/</link>
      <pubDate>Sat, 02 Jul 2022 06:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0012_match3/</guid>
      <description>&lt;p&gt;In this tutorial, we will create a match 3 puzzle game. Match 3 is a puzzle game in which players move multiple colorful pieces evenly arranged along a grid on the board to eliminate three or more pieces of the same color in a row. This genre is particularly popular among mobile game players because it is easy to operate and enjoyable.&lt;/p&gt;
&lt;p&gt;Candy Crush, Toon Blast, and Royal Match are just a few examples of popular games. Puzzle &amp;amp; Dragons and LINE Tsum Tsum are also based on Match 3, although the controls are slightly different. In this tutorial, we will create a puzzle like Candy Crush, in which the pieces are moved only one square at a time to match colors. If you want to make a game like &amp;ldquo;LINE tsum tsum&amp;rdquo;, check another tutorial, &lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/&#34; title=&#34;Connecting matching colors puzzle game in Godot&#34;&gt;Connecting matching colors puzzle game in Godot&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;The final project file for this tutorial is located at &lt;strong&gt;&lt;a href=&#34;https://github.com/msnsk/Match3.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
&lt;/strong&gt;. If you download the .zip file and import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine, you can check the project directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Connecting Matching Colors Puzzle Game in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/</link>
      <pubDate>Mon, 20 Jun 2022 03:00:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0011_connect_colors/</guid>
      <description>&lt;p&gt;In this tutorial, we will explain how to create a type of game in which you trace and erase drops of the same color, like the very popular Disney Tsum Tsum smartphone game.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.disney.co.jp/fc/tsum/tsum_en.html&#34; target=&#34;_blank&#34;&gt;LINE: Disney Tsum Tsum&lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;Note that the final project file in this tutorial is located in the &lt;a href=&#34;https://github.com/msnsk/ConnectColors.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
. You can directly check the project by downloading the .zip file and importing the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;End&amp;rdquo; folder with the Godot Engine.&lt;/p&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Godot version: &lt;strong&gt;3.4.4&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Memo:&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
Please also use the following articles to help you start creating your game.&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0001_download/&#34;&gt;Downloading Godot&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/&#34;&gt;Project Manager of Godot&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;creating-a-new-project&#34;&gt;Creating a new project&lt;/h2&gt;
&lt;p&gt;First, we would like you to start Godot Engine and create a new project. Let&amp;rsquo;s name the project &amp;ldquo;Connect Colors Start.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Homing Missiles in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0008_homing_missiles/</link>
      <pubDate>Sat, 28 May 2022 18:41:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0008_homing_missiles/</guid>
      <description>&lt;p&gt;In this tutorial, we will create a homing missile in a 2D top-down shooter. A homing missile is a missile that tracks its target.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Godot version: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;To focus on the creation of the homing missile, the rest of the project has been pre-created in advance.&lt;/p&gt;
&lt;p&gt;The project file for this tutorial is located at &lt;strong&gt;&lt;a href=&#34;https://github.com/msnsk/HomingMissiles.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
&lt;/strong&gt;. After downloading the .zip file, import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;Start&amp;rdquo; folder into the Godot Engine, and you can start the project with only the preliminary work completed. If you would like to see the completed project in a hurry, import the &amp;ldquo;project.godot&amp;rdquo; file from the &amp;ldquo;End&amp;rdquo; folder.&lt;/p&gt;
&lt;p&gt;All the assets imported into the project were downloaded from &lt;strong&gt;&lt;a href=&#34;https://www.kenney.nl/assets&#34; target=&#34;_blank&#34;&gt;KENNEY&lt;/a&gt;
&lt;/strong&gt; website. I used an asset pack called &lt;strong&gt;&lt;a href=&#34;https://www.kenney.nl/assets/tower-defense-top-down&#34; target=&#34;_blank&#34;&gt;Tower Defense (top-down)&lt;/a&gt;
&lt;/strong&gt;. I just want to thank them for making such a great asset pack available to the public.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Bullet Hell in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0007_bullethell/</link>
      <pubDate>Mon, 23 May 2022 01:30:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0007_bullethell/</guid>
      <description>&lt;p&gt;In this time, we will create a bullet hell aka barrage for a barrage shooting game. The bullet hell is a large number of bullets (or similar long-range attacks) like a curtain. A &amp;ldquo;bullet hell shooter&amp;rdquo; is a game in which the player shoots at and defeats enemy characters while dodging and weaving through the gaps between the bullets. Some games specialize in simply dodging the bullets. Many games are based on the motif of spaceships and fighter planes that fit the image (in this tutorial, a ground battle between a wizard and a monster though).&lt;/p&gt;
&lt;p&gt;In this tutorial, we will focus only on creating a bullet hell. Also, while bullet hell come in various shapes and sizes, we will focus on rotating-type bullet hell.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Godot version: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;The project file for this tutorial is located at &lt;strong&gt;&lt;a href=&#34;https://github.com/msnsk/BulletHell.git&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;
&lt;/strong&gt;. After downloading the .zip file, import the &amp;ldquo;project.godot&amp;rdquo; file in the &amp;ldquo;Start&amp;rdquo; folder into the Godot Engine, and you will be able to start with a project that has only been prepped. If you would like to see the completed project in a hurry, import the &amp;ldquo;project.godot&amp;rdquo; file from the &amp;ldquo;End&amp;rdquo; folder.&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Game development starting with something simple</title>
      <link>https://www.peanuts-code.com/en/posts/post0002_development_starts_small/</link>
      <pubDate>Wed, 11 May 2022 02:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0002_development_starts_small/</guid>
      <description>&lt;p&gt;This article is especially worth reading if you are a beginner who has just started or is thinking about starting game development. We hope you will read it through to the end.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;Now, do you have a dream game that you really want to make? Many people who have started or are thinking of starting game development probably dream of such a game. And that game will have plenty of elements of games that you have played and been influenced by in your life.&lt;/p&gt;
&lt;p&gt;As you can probably guess, this article is now going to make the claim that you should save your dream game for the future. However, this assertion is not brand new, but rather a rather common piece of advice for novice game developers. Let me explain why you should save your dream game for the future.&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&#34;elements-that-tend-to-be-included-in-the-dream-game&#34;&gt;Elements that tend to be included in the dream game&lt;/h2&gt;
&lt;p&gt;What elements tend to be included in a dream game? By the way, the elements here are the specifications and functions of the game. The following is a list of those that come to mind as examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Four Types of Guns for Top-down Shooting in Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0006_guns_of_topdown_shooter/</link>
      <pubDate>Sat, 07 May 2022 22:05:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0006_guns_of_topdown_shooter/</guid>
      <description>&lt;p&gt;In this tutorial, we are going to make four types of guns that commonly appear in 2D top-down shooters. Specifically, they are as follows.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handgun&lt;/li&gt;
&lt;li&gt;Shotgun&lt;/li&gt;
&lt;li&gt;Machine gun&lt;/li&gt;
&lt;li&gt;Laser Gun&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;Environment&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
This tutorial was created in the following environment&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Godot version: &lt;strong&gt;3.4.2&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
„Éª&lt;em&gt;Computer OS version: &lt;strong&gt;macOS 11.6.5&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;p&gt;Since this tutorial will focus on gun creation, the following has been prepared in advance.&lt;/p&gt;
&lt;h4 id=&#34;1-game-world&#34;&gt;1. Game world&lt;/h4&gt;
&lt;p&gt;A scene called &amp;ldquo;World.tscn&amp;rdquo; was prepared, and the appearance was simply created by adding a &amp;ldquo;TileMap&amp;rdquo; node. In addition to the &amp;ldquo;TileMap&amp;rdquo; node, a &amp;ldquo;Player&amp;rdquo; node and several &amp;ldquo;Obstacle&amp;rdquo; nodes were added. For these, we created individual scenes and added the instances.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0006_GunsOfTopdownShooter/img0.1.png&#34; alt=&#34;World scene tree&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;2-player-character&#34;&gt;2. Player Character&lt;/h4&gt;
&lt;p&gt;Created as &amp;ldquo;Player.tscn&amp;rdquo; scene. The root node is the &amp;ldquo;KinematicBody2D&amp;rdquo; class, and the &amp;ldquo;Sprite&amp;rdquo; and the &amp;ldquo;CollisionShape2D&amp;rdquo; were added as child nodes. The texture of the &amp;ldquo;Sprite&amp;rdquo; node is a hitman with a gun. A node named &amp;ldquo;Muzzle&amp;rdquo; of the &amp;ldquo;Position2D&amp;rdquo; class was placed at the tip of the image of the gun held by the hitman. This will be used later to specify the position where the bullet instance is generated when the gun is fired.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0006_GunsOfTopdownShooter/img0.2.png&#34; alt=&#34;Player scene tree&#34;  /&gt;
&lt;br&gt;
The following actions have already been added to the input map. Used to move the player character, shoot, and switch guns.&lt;br&gt;
- &lt;strong&gt;up&lt;/strong&gt;: W key - used to move the player character forward&lt;br&gt;
- &lt;strong&gt;down&lt;/strong&gt;: S key - used to move the player character backward.&lt;br&gt;
- &lt;strong&gt;fire&lt;/strong&gt;: Left mouse button - fires the gun.&lt;br&gt;
- &lt;strong&gt;switch&lt;/strong&gt;: Right mouse button: Switches between gun types.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0006_GunsOfTopdownShooter/img1.png&#34; alt=&#34;inputmap&#34;  /&gt;
&lt;br&gt;
Note that, for the sake of brevity in the tutorial, the player character&amp;rsquo;s sprite remains the same, even if the gun type is changed. Let&amp;rsquo;s say it looks like a handgun, but it can be a machine gun, a laser gun, or anything else.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Powerful Search Features in Godot</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0009_various_searches/</link>
      <pubDate>Wed, 27 Apr 2022 02:44:00 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0009_various_searches/</guid>
      <description>&lt;p&gt;When we develop a game, especially a big one, sometimes it may often happen that we can never find the scene which we want to edit or we cannot remember where the script file is, which we are going to edit.&lt;/p&gt;
&lt;p&gt;In this article, I am going to introduce some so powerful and useful search features with keyboard shortcuts. Once you know those, you can reduce the huge amount of time looking for something which may be the most uninteresting in the game development. In addition, you can use the search features in a much faster way instead of looking for a script file and clicking it in the file system dock, for example.&lt;/p&gt;
&lt;p&gt;By the way, we can see all default shortcuts in the official online documents of Godot. Be careful about that it says Alt as Option on macOS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;span style=&#34;color:salmon&#34;&gt;GODOT DOCS&lt;/span&gt;
&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://docs.godotengine.org/ja/stable/tutorials/editor/default_key_mapping.html&#34; target=&#34;_blank&#34;&gt;Default editor shortcuts&lt;/a&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyway, why do not you try to use the searches because it is sure to improve work efficiency.&lt;/p&gt;
&lt;p&gt;I will introduce ones in order of the widest range of searches first.&lt;/p&gt;</description>
    </item>
    <item>
      <title>üìî Age Doesn&#39;t Matter When You Start Game Development</title>
      <link>https://www.peanuts-code.com/en/posts/post0001_no_matter_how_old/</link>
      <pubDate>Sun, 16 Jan 2022 16:56:41 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/posts/post0001_no_matter_how_old/</guid>
      <description>&lt;p&gt;Many people want to start game development but tend to give up because of their age. No, this is not limited to game development but can be applied to anything from playing the piano to being a YouTuber.&lt;/p&gt;
&lt;p&gt;For some reason, it is a common perception that when you reach middle age, your physical and mental strength declines somehow. However, this is not true. There is no evidence that this socially accepted notion applies to you. It doesn&amp;rsquo;t matter if you are a middle-aged businessman, a first-grader, or a 90-year-old. The moment you decide you want to do something is the youngest time to start doing it.&lt;/p&gt;
&lt;p&gt;In the end, life is about doing or not doing. At the age of 100 years of life, there are few cases where it is too late to start doing something. It would be a shame to make a decision based only on a vague impression that game development sounds too difficult for you. You will never know the truth until you try it.&lt;/p&gt;
&lt;p&gt;It is a fact that game development is often thought of as a hurdle for the average person. When inexperienced people hear the word &amp;ldquo;game development,&amp;rdquo; they tend to imagine that they have to learn to program, that they don&amp;rsquo;t have a sense of design, that they can&amp;rsquo;t compose music, and so on. This impression of &amp;ldquo;difficult&amp;rdquo; gets stronger with age.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Project Manager of Godot3</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/</link>
      <pubDate>Sat, 30 Oct 2021 12:30:09 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0002_project_manager/</guid>
      <description>&lt;p&gt;In this article, we will introduce what you can do with the Project Manager.&lt;/p&gt;
&lt;p&gt;When Godot is launched, the first thing that appears is the Project Manager. The Project Manager is a tool for managing projects handled by Godot, including the following operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating new projects&lt;/li&gt;
&lt;li&gt;Loading project files downloaded from the Web&lt;/li&gt;
&lt;li&gt;Renaming a project&lt;/li&gt;
&lt;li&gt;Removing projects that were previously managed by the Project Manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When using Godot for the first time, a dialog box will appear as shown in the following screen shot, prompting you to open the Asset Library. The asset library can be easily accessed at any time, so choose Cancel for now.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0002_project_manager/en/img01.png&#34; alt=&#34;Godot Engine Project Manager&#34;  /&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;script async src=&#34;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4952908839423901&#34;
     crossorigin=&#34;anonymous&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;ins class=&#34;adsbygoogle&#34;
style=&#34;display:block; text-align:center;&#34;
data-ad-layout=&#34;in-article&#34;
data-ad-format=&#34;fluid&#34;
data-ad-client=&#34;ca-pub-4952908839423901&#34;
data-ad-slot=&#34;9419515863&#34;&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;script&gt;
     (adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;hr&gt;
&lt;h2 id=&#34;creating-a-new-project&#34;&gt;Creating a new project&lt;/h2&gt;
&lt;p&gt;Click &amp;ldquo;New Project&amp;rdquo; from the right sidebar of the Project Manager.&lt;br&gt;
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.peanuts-code.com/images/tutorials/gd0002_project_manager/en/img02.png&#34; alt=&#34;Right side bar on Project Manager window&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>ü§ñ Downloading Godot</title>
      <link>https://www.peanuts-code.com/en/tutorials/gd0001_download/</link>
      <pubDate>Mon, 25 Oct 2021 00:15:11 +0900</pubDate>
      <guid>https://www.peanuts-code.com/en/tutorials/gd0001_download/</guid>
      <description>&lt;h2 id=&#34;whats-godot&#34;&gt;What&amp;rsquo;s Godot?&lt;/h2&gt;
&lt;p&gt;Godot Engine, or simply Godot, is a very popular open-source game engine that is now gaining popularity, especially in the indie game industry.&lt;/p&gt;
&lt;p&gt;A game engine is a reliable tool that handles all the complicated tasks for game developers by providing them with a system that is commonly needed in game development from the beginning so that they can concentrate on game development.&lt;/p&gt;
&lt;p&gt;For example, &amp;ldquo;displaying characters on the screen,&amp;rdquo; &amp;ldquo;sound effects sound when buttons are pressed and the screen changes,&amp;rdquo; &amp;ldquo;shining light on 3D objects and drawing shadows,&amp;rdquo; and &amp;ldquo;causing damage when a beam of light hits an enemy,&amp;rdquo; etc., are all common game development tasks that would be difficult if created from scratch. The game engine takes care of these processes for us.&lt;/p&gt;
&lt;p&gt;In this article, I will explain the first step to start using Godot, which is to download it (very easy).&lt;/p&gt;
&lt;p&gt;Godot is multi-platform. The files are available for almost all computers with major operating systems (Windows, macOS, and Linux) installed.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started with the download process.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
